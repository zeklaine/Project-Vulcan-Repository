<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.14.0312.2049                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.2'>
      <aliases enabled='yes' />
      <column caption='METRIC SELECT' datatype='string' name='[Bach Persist Percent - 200 Parameter]' param-domain-type='list' role='measure' type='nominal' value='&quot;Retention Percent - FT&quot;'>
        <calculation class='tableau' formula='&quot;Retention Percent - FT&quot;' />
        <members>
          <member value='&quot;Admissions Total&quot;' />
          <member value='&quot;Applicants Total&quot;' />
          <member value='&quot;Student/Faculty Ratio&quot;' />
          <member value='&quot;Retention Number - FT&quot;' />
          <member value='&quot;Retention Percent - FT&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='IPEDS_RACE_2008-12' inline='true' name='csv.41820.420062905090' version='8.2'>
      <connection auto-extract='yes' character-set='65001' class='csv' directory='//cbrkdp1/incoming/Project Vulcan/Project-Vulcan-Repository/Data/IPEDS/IPEDs Subset/' driver='' filename='IPEDS_RACE_2008-12.csv' force-character-set='no' force-header='no' force-separator='no' header='yes' separator=','>
        <relation name='IPEDS_RACE_2008-12#csv' table='[IPEDS_RACE_2008-12#csv]' type='table' />
      </connection>
      <column datatype='string' datatype-customized='true' name='[Cohort Status]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Cohort Type]' role='dimension' type='nominal'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' datatype-customized='true' name='[UNITID]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
      </column>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource inline='true' name='IPEDS_MAIN_2008-12 (copy)' version='8.2'>
      <connection auto-extract='yes' character-set='65001' class='csv' directory='//cbrkdp1/incoming/Project Vulcan/Project-Vulcan-Repository/Data/IPEDS/IPEDs Subset/' driver='' filename='IPEDS_MAIN_2008-12.csv' force-character-set='no' force-header='no' force-separator='no' header='yes' separator=','>
        <relation name='IPEDS_MAIN_2008-12#csv' table='[IPEDS_MAIN_2008-12#csv]' type='table' />
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' datatype-customized='true' name='[ACTCM25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTCM75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTEN25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTEN75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTMT25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTMT75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTNUM]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTPCT]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTWR25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTWR75]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[ACT_CODE]' role='dimension' type='ordinal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Academic/Career Counseling]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Admission Test Scores]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Admissions - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Admissions - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Admissions Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Applicants - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Applicants - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Applicants Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Associates Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Bach Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Binary EF]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Binary GR200]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Binary IC]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CALSYS]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CBSATYPE]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CBSA]' role='dimension' semantic-role='[CMSA].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[CITY]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CONTROL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CSA]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Sum' caption='Blend' datatype='integer' name='[Calculation_2980630103225992]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='1' scope-isolation='false' />
      </column>
      <column caption='c_metricSelect' datatype='real' name='[Calculation_3210627144522902]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Bach Persist Percent - 200 Parameter]&#13;&#10;WHEN &apos;Applicants Total&apos; THEN [Applicants Total]&#13;&#10;WHEN &apos;Admissions Total&apos; THEN [Admissions Total]&#13;&#10;WHEN &apos;Student/Faculty Ratio&apos; THEN [Student/Faculty Ratio]&#13;&#10;WHEN &apos;Retention Number - FT&apos; THEN [Retention Number - FT]&#13;&#10;WHEN &apos;Retention Percent - FT&apos; THEN [Retention Percent - FT]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='c_Inst Concat' datatype='string' name='[Calculation_5530630103139859]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[UNITID] + &quot;:  &quot; + [INSTNM]' scope-isolation='false' />
      </column>
      <column datatype='string' datatype-customized='true' name='[Doctors Deg - Other]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Doctors Deg - Research/Schol]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Doctors Deg = Prof Practice]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Employment Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled - Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled FT - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled FT - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled Full Time Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled PT - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled PT - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled Part Time Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[FIPS]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[HOSPITAL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Historically Black]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[INSTCAT]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[INSTSIZE]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[LANDGRNT]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Avg' datatype='real' name='[Latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Less Than 1Yr Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Level]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Avg' datatype='real' name='[Longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[MEDICAL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Masters Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[No Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' datatype-customized='true' name='[OBEREG]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[OPEFLAG]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[OPENADMP]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[On-Campus Daycare]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[One but Less Than 2Yr Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Other Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[PSET4FLG]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Phone]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Placement Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Post-Masters Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Postbacc Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Recommendations]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Remedial Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATMT25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATMT75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATNUM]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATPCT]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATVR25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATVR75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATWR25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATWR75]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[STABBR]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Secondary School GPA]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Secondary School Rank]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Secondary School Record]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[TRIBAL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Two but Less Than 4Yr Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[UNITID]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Urbanization]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' name='[ZIP]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal'>
      </column>
      <column-instance column='[CITY]' derivation='None' name='[none:CITY:nk]' pivot='key' type='nominal' />
      <column-instance column='[Latitude]' derivation='None' name='[none:Latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Longitude]' derivation='None' name='[none:Longitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[STABBR]' derivation='None' name='[none:STABBR:nk]' pivot='key' type='nominal' />
      <group caption='Action (CITY,Latitude,Longitude,STABBR)' hidden='true' name='[Action (CITY,Latitude,Longitude,STABBR)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[CITY]' />
          <groupfilter function='level-members' level='[Latitude]' />
          <groupfilter function='level-members' level='[Longitude]' />
          <groupfilter function='level-members' level='[STABBR]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (CITY,Latitude,Longitude,STABBR)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:CITY:nk]' />
          <groupfilter function='level-members' level='[none:Latitude:qk]' />
          <groupfilter function='level-members' level='[none:Longitude:qk]' />
          <groupfilter function='level-members' level='[none:STABBR:nk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='METRIC SELECT' datatype='string' name='[Bach Persist Percent - 200 Parameter]' param-domain-type='list' role='measure' type='nominal' value='&quot;Retention Percent - FT&quot;'>
          <calculation class='tableau' formula='&quot;Retention Percent - FT&quot;' />
          <members>
            <member value='&quot;Admissions Total&quot;' />
            <member value='&quot;Applicants Total&quot;' />
            <member value='&quot;Student/Faculty Ratio&quot;' />
            <member value='&quot;Retention Number - FT&quot;' />
            <member value='&quot;Retention Percent - FT&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='IPEDS_MAIN_2008-12' inline='true' name='csv.41817.609948333331' version='8.2'>
      <connection auto-extract='yes' character-set='65001' class='csv' directory='//cbrkdp1/Incoming/Project Vulcan/Project-Vulcan-Repository/Data/IPEDS/IPEDs Subset/' driver='' filename='IPEDS_MAIN_2008-12.csv' force-character-set='no' force-header='no' force-separator='no' header='yes' separator=','>
        <relation name='IPEDS_MAIN_2008-12#csv' table='[IPEDS_MAIN_2008-12#csv]' type='table' />
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' datatype-customized='true' name='[ACTCM25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTCM75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTEN25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTEN75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTMT25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTMT75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTNUM]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTPCT]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTWR25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTWR75]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[ACT_CODE]' role='dimension' type='ordinal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Academic/Career Counseling]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Admission Test Scores]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Admissions - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Admissions - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Admissions Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Applicants - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Applicants - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Applicants Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Associates Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Bach Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Binary EF]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Binary GR200]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Binary IC]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CALSYS]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CBSATYPE]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CBSA]' role='dimension' semantic-role='[CMSA].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[CITY]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CONTROL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CSA]' role='dimension' type='nominal'>
      </column>
      <column caption='c_Inst Concat' datatype='string' name='[Calculation_0340630102305428]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[UNITID] + &quot;:  &quot; + [INSTNM]' scope-isolation='false' />
      </column>
      <column caption='c_metricSelect' datatype='real' name='[Calculation_3210627144522902]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Bach Persist Percent - 200 Parameter]&#13;&#10;WHEN &apos;Applicants Total&apos; THEN [Applicants Total]&#13;&#10;WHEN &apos;Admissions Total&apos; THEN [Admissions Total]&#13;&#10;WHEN &apos;Student/Faculty Ratio&apos; THEN [Student/Faculty Ratio]&#13;&#10;WHEN &apos;Retention Number - FT&apos; THEN [Retention Number - FT]&#13;&#10;WHEN &apos;Retention Percent - FT&apos; THEN [Retention Percent - FT]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column aggregation='Sum' caption='Blend' datatype='integer' name='[Calculation_5200630103212456]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='1' scope-isolation='false' />
      </column>
      <column caption='c_Selected Inst' datatype='string' name='[Calculation_6740630103324117]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF MIN([Calculation_0340630102305428]) == MIN([IPEDS_MAIN_2008-12 (copy)].[Calculation_5530630103139859]) THEN&#13;&#10;    &quot;Selected Institution&quot;&#13;&#10;ELSE&#13;&#10;    &quot;Other&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='string' datatype-customized='true' name='[Doctors Deg - Other]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Doctors Deg - Research/Schol]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Doctors Deg = Prof Practice]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Employment Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled - Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled FT - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled FT - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled Full Time Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled PT - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled PT - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled Part Time Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[FIPS]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[HOSPITAL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Historically Black]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[INSTCAT]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[INSTSIZE]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[LANDGRNT]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Avg' datatype='real' name='[Latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Less Than 1Yr Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Level]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Avg' datatype='real' name='[Longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[MEDICAL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Masters Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[No Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' datatype-customized='true' name='[OBEREG]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[OPEFLAG]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[OPENADMP]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[On-Campus Daycare]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[One but Less Than 2Yr Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Other Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[PSET4FLG]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Phone]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Placement Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Post-Masters Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Postbacc Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Recommendations]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Remedial Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATMT25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATMT75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATNUM]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATPCT]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATVR25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATVR75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATWR25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATWR75]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[STABBR]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Secondary School GPA]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Secondary School Rank]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Secondary School Record]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[TRIBAL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Two but Less Than 4Yr Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[UNITID]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Urbanization]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' name='[ZIP]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal'>
      </column>
      <column-instance column='[CITY]' derivation='None' name='[none:CITY:nk]' pivot='key' type='nominal' />
      <column-instance column='[Latitude]' derivation='None' name='[none:Latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Longitude]' derivation='None' name='[none:Longitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[STABBR]' derivation='None' name='[none:STABBR:nk]' pivot='key' type='nominal' />
      <group caption='Action (CITY,Latitude,Longitude,STABBR)' hidden='true' name='[Action (CITY,Latitude,Longitude,STABBR)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[CITY]' />
          <groupfilter function='level-members' level='[Latitude]' />
          <groupfilter function='level-members' level='[Longitude]' />
          <groupfilter function='level-members' level='[STABBR]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (CITY,Latitude,Longitude,STABBR)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:CITY:nk]' />
          <groupfilter function='level-members' level='[none:Latitude:qk]' />
          <groupfilter function='level-members' level='[none:Longitude:qk]' />
          <groupfilter function='level-members' level='[none:STABBR:nk]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='IPEDS_MAIN_2008-12 (copy)'>
        <column caption='c_Inst Concat' datatype='string' name='[Calculation_5530630103139859]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='[UNITID] + &quot;:  &quot; + [INSTNM]' scope-isolation='false' />
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='Parameters'>
        <column caption='METRIC SELECT' datatype='string' name='[Bach Persist Percent - 200 Parameter]' param-domain-type='list' role='measure' type='nominal' value='&quot;Retention Percent - FT&quot;'>
          <calculation class='tableau' formula='&quot;Retention Percent - FT&quot;' />
          <members>
            <member value='&quot;Admissions Total&quot;' />
            <member value='&quot;Applicants Total&quot;' />
            <member value='&quot;Student/Faculty Ratio&quot;' />
            <member value='&quot;Retention Number - FT&quot;' />
            <member value='&quot;Retention Percent - FT&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Online' />
  </mapsources>
  <shared-views>
    <shared-view name='csv.41817.609948333331'>
      <datasources>
        <datasource caption='IPEDS_MAIN_2008-12' name='csv.41817.609948333331' />
      </datasources>
      <datasource-dependencies datasource='csv.41817.609948333331'>
        <column datatype='string' name='[CONF]' role='dimension' type='nominal'>
        </column>
        <column datatype='string' name='[INSTNM]' role='dimension' type='nominal'>
        </column>
        <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
        </column>
        <column-instance column='[CONF]' derivation='None' name='[none:CONF:nk]' pivot='key' type='nominal' />
        <column-instance column='[INSTNM]' derivation='None' name='[none:INSTNM:nk]' pivot='key' type='nominal' />
        <column-instance column='[YEAR]' derivation='None' name='[none:YEAR:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[csv.41817.609948333331].[none:CONF:nk]'>
        <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
          <groupfilter function='member' level='[none:CONF:nk]' member='%null%' />
          <groupfilter from='&quot;ACC&quot;' function='range' level='[none:CONF:nk]' to='&quot;Sun Belt&quot;' />
        </groupfilter>
      </filter>
      <filter class='categorical' column='[csv.41817.609948333331].[none:INSTNM:nk]'>
        <groupfilter function='level-members' level='[none:INSTNM:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[csv.41817.609948333331].[none:YEAR:nk]'>
        <groupfilter function='member' level='[none:YEAR:nk]' member='&quot;2012&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
  </shared-views>
  <actions>
    <action caption='Filter 1 (generated)' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='MapBoard' type='sheet' worksheet='Map' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='MapBoard' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Bar Chart'>
      <table>
        <view>
          <datasources>
            <datasource caption='IPEDS_MAIN_2008-12' name='csv.41817.609948333331' />
            <datasource name='Parameters' />
            <datasource caption='IPEDS_RACE_2008-12' name='csv.41820.420062905090' />
          </datasources>
          <datasource-dependencies datasource='csv.41817.609948333331'>
            <column datatype='string' datatype-customized='true' name='[CALSYS]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[CONF]' role='dimension' type='nominal'>
            </column>
            <column caption='c_metricSelect' datatype='real' name='[Calculation_3210627144522902]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Bach Persist Percent - 200 Parameter]&#13;&#10;WHEN &apos;Applicants Total&apos; THEN [Applicants Total]&#13;&#10;WHEN &apos;Admissions Total&apos; THEN [Admissions Total]&#13;&#10;WHEN &apos;Student/Faculty Ratio&apos; THEN [Student/Faculty Ratio]&#13;&#10;WHEN &apos;Retention Number - FT&apos; THEN [Retention Number - FT]&#13;&#10;WHEN &apos;Retention Percent - FT&apos; THEN [Retention Percent - FT]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column datatype='real' datatype-customized='true' name='[Enrolled - Total]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[INSTNM]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[STABBR]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
            </column>
            <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_3210627144522902]' derivation='Avg' name='[avg:Calculation_3210627144522902:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CALSYS]' derivation='None' name='[none:CALSYS:nk]' pivot='key' type='nominal' />
            <column-instance column='[CONF]' derivation='None' name='[none:CONF:nk]' pivot='key' type='nominal' />
            <column-instance column='[INSTNM]' derivation='None' name='[none:INSTNM:nk]' pivot='key' type='nominal' />
            <column-instance column='[STABBR]' derivation='None' name='[none:STABBR:nk]' pivot='key' type='nominal' />
            <column-instance column='[YEAR]' derivation='None' name='[none:YEAR:nk]' pivot='key' type='nominal' />
            <column-instance column='[Enrolled - Total]' derivation='Sum' name='[sum:Enrolled - Total:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='csv.41820.420062905090'>
            <column datatype='string' datatype-customized='true' name='[UNITID]' role='dimension' type='nominal'>
            </column>
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41817.609948333331].[none:CALSYS:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:CALSYS:nk]' member='%null%' />
              <groupfilter from='&quot;-2&quot;' function='range' level='[none:CALSYS:nk]' to='&quot;7&quot;' />
            </groupfilter>
          </filter>
          <sort class='computed' column='[csv.41817.609948333331].[none:INSTNM:nk]' direction='DESC' using='[csv.41817.609948333331].[avg:Calculation_3210627144522902:qk]'>
          </sort>
          <filter class='categorical' column='[csv.41817.609948333331].[none:STABBR:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:STABBR:nk]' member='%null%' />
              <groupfilter from='&quot;AK&quot;' function='range' level='[none:STABBR:nk]' to='&quot;WY&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[csv.41817.609948333331].[sum:Enrolled - Total:qk]' included-values='in-range'>
            <min>0.0</min>
            <max>47123.0</max>
          </filter>
          <slices>
            <column>[csv.41817.609948333331].[none:INSTNM:nk]</column>
            <column>[csv.41817.609948333331].[none:YEAR:nk]</column>
            <column>[csv.41817.609948333331].[none:CONF:nk]</column>
            <column>[csv.41817.609948333331].[sum:Enrolled - Total:qk]</column>
            <column>[csv.41817.609948333331].[none:CALSYS:nk]</column>
            <column>[csv.41817.609948333331].[none:STABBR:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[csv.41817.609948333331].[avg:Calculation_3210627144522902:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[csv.41817.609948333331].[none:INSTNM:nk]' value='true' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[csv.41817.609948333331].[none:INSTNM:nk]' value='Cohort Members:'>
              <formatted-text>
                <run>Cohort Members:</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[csv.41817.609948333331].[none:INSTNM:nk]</rows>
        <cols>[csv.41817.609948333331].[avg:Calculation_3210627144522902:qk]</cols>
        <join-lod-include-overrides>
          <column>[csv.41820.420062905090].[UNITID]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Use Checkbox Filter or click/drag map area to refine the cohort:</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='IPEDS_MAIN_2008-12' name='csv.41817.609948333331' />
          </datasources>
          <mapsources>
            <mapsource name='Online' />
          </mapsources>
          <datasource-dependencies datasource='csv.41817.609948333331'>
            <column datatype='string' name='[CITY]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[CONF]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[INSTNM]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Avg' datatype='real' name='[Latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' datatype='real' name='[Longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column datatype='string' name='[STABBR]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
            </column>
            <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[CITY]' derivation='None' name='[none:CITY:nk]' pivot='key' type='nominal' />
            <column-instance column='[CONF]' derivation='None' name='[none:CONF:nk]' pivot='key' type='nominal' />
            <column-instance column='[INSTNM]' derivation='None' name='[none:INSTNM:nk]' pivot='key' type='nominal' />
            <column-instance column='[Latitude]' derivation='None' name='[none:Latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude]' derivation='None' name='[none:Longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[STABBR]' derivation='None' name='[none:STABBR:nk]' pivot='key' type='nominal' />
            <column-instance column='[YEAR]' derivation='None' name='[none:YEAR:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41817.609948333331].[Exclusions (CITY,Latitude,Longitude,STABBR)]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:CITY:nk]' />
                <groupfilter function='level-members' level='[none:Latitude:qk]' />
                <groupfilter function='level-members' level='[none:Longitude:qk]' />
                <groupfilter function='level-members' level='[none:STABBR:nk]' />
              </groupfilter>
              <groupfilter function='reorder-dimensionality'>
                <groupfilter function='union'>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;AS&quot;' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Pago Pago&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='-170.74276900000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='-14.322592' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='-170.742728' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='-14.322587' />
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;FM&quot;' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Pohnpei&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='158.20923099999999' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='6.9552500000000004' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='158.212434' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='6.9610339999999997' />
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;GU&quot;' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Mangilao&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.80240000000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.433054' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.802413' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.433055' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.80264399999999' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.449159999999999' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.802719' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.449165000000001' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.80283700000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.432726000000001' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.80336800000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.43689' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.80887000000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.440156999999999' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.80892700000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.440160000000001' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.808944' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.440649000000001' />
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;HI&quot;' />
                    <groupfilter function='union'>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Hilo&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.231426' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.630054000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.08132900000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.701854000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.08052799999999' />
                            <groupfilter function='union'>
                              <groupfilter function='member' level='[none:Latitude:qk]' member='19.699031999999999' />
                              <groupfilter function='member' level='[none:Latitude:qk]' member='19.699033' />
                            </groupfilter>
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.07772700000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.700675' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.07748599999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.700763999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.07003900000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.706104' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.069929' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.706112000000001' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Honolulu&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.888272' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.326909000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.88819699999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.327037000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.87487999999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.319946000000002' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.870454' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.320484' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.87039300000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.320515' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86386300000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.308140000000002' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86382' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.308206999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.863315' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.308509999999998' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86300800000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.310185000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.862753' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.310293999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.862651' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.310091' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86195799999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.313504999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86166499999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.311329000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.861626' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.311351999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86154300000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.308491' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86153400000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.313735999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86147299999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.308471000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86093299999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.314212999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.860916' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.308026000000002' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86087900000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.313924' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86081100000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.300174999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.860668' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.300265' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86039500000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.300446000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86019999999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.309436999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86013' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.309419999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86005700000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.310956000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86002300000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.309273000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.85995600000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.311008999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='union'>
                              <groupfilter function='member' level='[none:Longitude:qk]' member='-157.85928000000001' />
                              <groupfilter function='member' level='[none:Longitude:qk]' member='-157.85927899999999' />
                            </groupfilter>
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.310141999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.847532' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.295304999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.84704099999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.295095' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.84228899999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.299213000000002' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.841613' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.292717' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.84158400000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.298964999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.84152900000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.298959' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.84140400000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.293023999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.84140199999999' />
                            <groupfilter function='union'>
                              <groupfilter function='member' level='[none:Latitude:qk]' member='21.293049' />
                              <groupfilter function='member' level='[none:Latitude:qk]' member='21.299351000000001' />
                            </groupfilter>
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.819919' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.29683' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.819917' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.296803000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.81955099999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.299381' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.81830400000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.300073000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.81725800000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.299292999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.816607' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.292648' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.80790999999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.287285000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.80764199999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.290274' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.80600100000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.290623' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.800543' />
                            <groupfilter function='union'>
                              <groupfilter function='member' level='[none:Latitude:qk]' member='21.282081000000002' />
                              <groupfilter function='member' level='[none:Latitude:qk]' member='21.282081999999999' />
                            </groupfilter>
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.80041299999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.271356999999998' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.80014199999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.271014999999998' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.79953' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.270541000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.754955' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.296361000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.75473199999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.296375000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.75471899999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.296438999999999' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Kahului&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-156.47985399999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='20.890561000000002' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-156.46326500000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='20.892946999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-156.46322799999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='20.892918000000002' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Kailua Kona&quot;' />
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='-156.04118700000001' />
                          <groupfilter function='union'>
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.729351000000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.729351999999999' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Kamuela&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.714449' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.888141999999998' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.67321899999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='20.016227000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.65978100000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='20.017720000000001' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Kaneohe&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.81344799999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.409275000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.81321199999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.409220000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.81074100000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.409001' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Kapolei&quot;' />
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='-158.093177' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='21.333351' />
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Laie&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.92535799999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.641172000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.92477600000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.645405' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.92476199999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.645410999999999' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Lihue&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-159.433076' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.962681' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-159.43305599999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.962712' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-159.39596599999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.969508999999999' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Pearl City&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.98509899999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.392802' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.98419100000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.394926000000002' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.98210499999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.394141999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.98201900000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.394065000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.98043999999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.393452' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;MH&quot;' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Majuro&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='171.37832800000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='7.102983' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='171.37840399999999' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='7.1029819999999999' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='171.37844200000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='7.1027399999999998' />
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;MP&quot;' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Saipan&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='145.721712' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='15.152353' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='145.721733' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='15.152246999999999' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='145.72176400000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='15.152352' />
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;PW&quot;' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Koror&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='134.47195600000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='7.3422099999999997' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='134.47199000000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='7.342212' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='134.47404299999999' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='7.3429130000000002' />
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <order>
                  <hierarchy name='[none:CITY:nk]' />
                  <hierarchy name='[none:Latitude:qk]' />
                  <hierarchy name='[none:Longitude:qk]' />
                  <hierarchy name='[none:STABBR:nk]' />
                </order>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[csv.41817.609948333331].[Exclusions (CITY,Latitude,Longitude,STABBR)]</column>
            <column>[csv.41817.609948333331].[none:YEAR:nk]</column>
            <column>[csv.41817.609948333331].[none:INSTNM:nk]</column>
            <column>[csv.41817.609948333331].[none:CONF:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='um_light_countries' value='true' />
            <format attr='enabled' id='um_light_states' value='true' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='false' />
            <format attr='enabled' id='pp2_statelabels' value='false' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[csv.41817.609948333331].[none:CITY:nk]' />
              <lod column='[csv.41817.609948333331].[none:STABBR:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>CITY:&#9;</run>
                <run bold='true'>&lt;[csv.41817.609948333331].[none:CITY:nk]&gt;&#10;</run>
                <run fontcolor='#787878'>STATE:</run>
                <run bold='true' fontcolor='#787878'>Æ&#9;</run>
                <run bold='true'>&lt;[csv.41817.609948333331].[none:STABBR:nk]&gt;&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.42779004573822021' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[csv.41817.609948333331].[none:Latitude:qk]</rows>
        <cols>[csv.41817.609948333331].[none:Longitude:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SIMILARITY: plot'>
      <table>
        <view>
          <datasources>
            <datasource caption='IPEDS_MAIN_2008-12' name='csv.41817.609948333331' />
            <datasource name='IPEDS_MAIN_2008-12 (copy)' />
          </datasources>
          <datasource-dependencies datasource='IPEDS_MAIN_2008-12 (copy)'>
            <column aggregation='Sum' caption='Blend' datatype='integer' name='[Calculation_2980630103225992]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='1' scope-isolation='false' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='csv.41817.609948333331'>
            <column datatype='string' name='[CONF]' role='dimension' type='nominal'>
            </column>
            <column caption='c_Inst Concat' datatype='string' name='[Calculation_0340630102305428]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[UNITID] + &quot;:  &quot; + [INSTNM]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[INSTNM]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[CONF]' derivation='None' name='[none:CONF:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_0340630102305428]' derivation='None' name='[none:Calculation_0340630102305428:nk]' pivot='key' type='nominal' />
            <column-instance column='[INSTNM]' derivation='None' name='[none:INSTNM:nk]' pivot='key' type='nominal' />
            <column-instance column='[YEAR]' derivation='None' name='[none:YEAR:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41817.609948333331].[none:Calculation_0340630102305428:nk]'>
            <groupfilter function='member' level='[none:Calculation_0340630102305428:nk]' member='&quot;153658:  University of Iowa&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[csv.41817.609948333331].[none:Calculation_0340630102305428:nk]</column>
            <column>[csv.41817.609948333331].[none:CONF:nk]</column>
            <column>[csv.41817.609948333331].[none:INSTNM:nk]</column>
            <column>[csv.41817.609948333331].[none:YEAR:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
        <join-lod-include-overrides>
          <column>[IPEDS_MAIN_2008-12 (copy)].[Calculation_2980630103225992]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Sheet 3'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontsize='10'>Institutions&#10;Selected:</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='IPEDS_MAIN_2008-12' name='csv.41817.609948333331' />
          </datasources>
          <datasource-dependencies datasource='csv.41817.609948333331'>
            <column datatype='string' name='[CONF]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[INSTNM]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[CONF]' derivation='None' name='[none:CONF:nk]' pivot='key' type='nominal' />
            <column-instance column='[INSTNM]' derivation='None' name='[none:INSTNM:nk]' pivot='key' type='nominal' />
            <column-instance column='[YEAR]' derivation='None' name='[none:YEAR:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41817.609948333331].[Action (CITY,Latitude,Longitude,STABBR)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[CITY]' />
              <groupfilter function='level-members' level='[Latitude]' />
              <groupfilter function='level-members' level='[Longitude]' />
              <groupfilter function='level-members' level='[STABBR]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[csv.41817.609948333331].[Action (CITY,Latitude,Longitude,STABBR)]</column>
            <column>[csv.41817.609948333331].[none:YEAR:nk]</column>
            <column>[csv.41817.609948333331].[none:INSTNM:nk]</column>
            <column>[csv.41817.609948333331].[none:CONF:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' value='83' />
            <format attr='width' value='122' />
            <format attr='text-align' value='center' />
            <format attr='vertical-align' value='center' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width-header' value='10' />
            <format attr='height-header' value='12' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='20' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[csv.41817.609948333331].[sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='FilterBoard'>
      <style>
      </style>
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='80625' id='2' param='vert' type='layout-flow' w='34500' x='50300' y='10250'>
          <zone h='6375' id='12' param='[Parameters].[Bach Persist Percent - 200 Parameter]' type='paramctrl' w='34500' x='50300' y='10250'>
            <formatted-text>
              <run>Select a Metric:</run>
            </formatted-text>
          </zone>
          <zone h='74250' id='5' name='Bar Chart' w='34500' x='50300' y='16625'>
            <layout-cache fixed-size-h='47318' type-h='fixed' type-w='fixed' />
          </zone>
        </zone>
        <zone h='78750' id='13' param='vert' type='layout-flow' w='14000' x='85500' y='9375'>
          <zone h='17125' id='10' name='Bar Chart' param='[csv.41817.609948333331].[none:YEAR:nk]' type='filter' w='14000' x='85500' y='9375'>
          </zone>
          <zone h='45250' id='14' name='Bar Chart' param='[csv.41817.609948333331].[none:INSTNM:nk]' type='filter' w='14000' x='85500' y='26500'>
          </zone>
          <zone h='16375' id='15' name='Sheet 3' show-title='true' w='14000' x='85500' y='71750'>
            <layout-cache fixed-size-h='123' type-h='fixed' type-w='fixed' />
          </zone>
        </zone>
        <zone h='77125' id='16' param='vert' type='layout-flow' w='49000' x='600' y='11000'>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='MapBoard'>
      <style>
      </style>
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='77125' id='1' param='vert' type='layout-flow' w='49000' x='600' y='11000'>
          <zone h='77125' id='4' name='Map' show-title='true' w='49000' x='600' y='11000'>
            <layout-cache minheight='246' type-h='scalable' type-w='fixed' />
          </zone>
        </zone>
        <zone h='80625' id='2' param='vert' type='layout-flow' w='34500' x='50300' y='10250'>
          <zone h='6375' id='12' param='[Parameters].[Bach Persist Percent - 200 Parameter]' type='paramctrl' w='34500' x='50300' y='10250'>
            <formatted-text>
              <run>Select a Metric:</run>
            </formatted-text>
          </zone>
          <zone h='74250' id='5' name='Bar Chart' w='34500' x='50300' y='16625'>
            <layout-cache fixed-size-h='47318' type-h='fixed' type-w='fixed' />
          </zone>
        </zone>
        <zone h='78750' id='13' param='vert' type='layout-flow' w='14000' x='85500' y='9375'>
          <zone h='17125' id='10' name='Bar Chart' param='[csv.41817.609948333331].[none:YEAR:nk]' type='filter' w='14000' x='85500' y='9375'>
          </zone>
          <zone h='45250' id='14' name='Bar Chart' param='[csv.41817.609948333331].[none:INSTNM:nk]' type='filter' w='14000' x='85500' y='26500'>
          </zone>
          <zone h='16375' id='15' name='Sheet 3' show-title='true' w='14000' x='85500' y='71750'>
            <layout-cache fixed-size-h='123' type-h='fixed' type-w='fixed' />
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='1' name='Bar Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Bach Persist Percent - 200 Parameter]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41817.609948333331].[none:CALSYS:nk]</field>
          <field>[csv.41817.609948333331].[none:CONF:nk]</field>
          <field>[csv.41817.609948333331].[none:INSTNM:nk]</field>
          <field>[csv.41817.609948333331].[none:STABBR:nk]</field>
          <field>[csv.41817.609948333331].[none:YEAR:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41817.609948333331].[none:CITY:nk]</field>
          <field>[csv.41817.609948333331].[none:INSTNM:nk]</field>
          <field>[csv.41817.609948333331].[none:Latitude:qk]</field>
          <field>[csv.41817.609948333331].[none:Longitude:qk]</field>
          <field>[csv.41817.609948333331].[none:STABBR:nk]</field>
          <field>[csv.41817.609948333331].[none:YEAR:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41817.609948333331].[none:INSTNM:nk]</field>
          <field>[csv.41817.609948333331].[none:YEAR:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='MapBoard'>
      <active id='1' />
      <zones>
        <zone name='Map'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Bach Persist Percent - 200 Parameter]' type='paramctrl' />
      </zones>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='FilterBoard'>
      <zones>
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Bach Persist Percent - 200 Parameter]' type='paramctrl' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='SIMILARITY: plot'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='261'>
            <card mode='dropdown' param='[csv.41817.609948333331].[none:Calculation_0340630102305428:nk]' type='filter' />
            <card param='[csv.41817.609948333331].[none:YEAR:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41817.609948333331].[none:Calculation_0340630102305428:nk]</field>
        </color-one-way>
      </highlight>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Bar Chart' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAgAElEQVR4nO29eYxc153fe+6+b3Vrr67em+zmKpKSSFmWZWk0
      1mTkGY/tWbJNMAiQvLwgARIgQB7w3h8Pycsk7+W9JBggCYJgEGQy44zjccbbyJY0IimKu7jv
      vXd1de3bvXX39bw/2CQdL5DHpF0p4X7+IVms6lsH/cU5n3vu75yDQAhBQsJPCw4ASDKU8FOD
      P/zDcZyf/7V9379aHSbhHWuQx91Po7ISc4VCigUAQRAAIYBxaFiuKPDf9+5oe6cRhNHs9JRp
      6IwgY8iTAPiO1ewMSpMTOIIAACCED+7fnZwoaIYfAnSymAUAdBs1MwBTUxMYgriue+x3T1l+
      /PNtcsKzZLcHghBe/ugjSKfD7krbpSiWL6jM0MO9Tm3m6Mv61tX2ICSF7Je//MZ2tar1ti+d
      Oh1zIs+ioW0bIUYTOO71MCbdMeyJkiLJBR7Y252B48G8Ql2+eK/b6zBKRoRa28QZhsgUv8wR
      2GhbnvBMwB/9JT507GUYh2hUMgMkgghDIgQteMMpIwDi7FIBYrKSJQg6LXPF0otoCIduILA4
      ywvVWluRBegaIcRDABpbK1Nze7lYQ/iMLLCsyJ146cRg0PFiFAvMIiQFnqltrbGsnE3Lo2x6
      wrMAGaFBu677ny9WQ4iM6gskPD34x7/lZ8m+ohgDdLTfIeFpeBKg+uaDmC/mZQZB0TiGKAoA
      QOI43tzcnJ2dAwAiCAIhhAAQGHrz2uXs5FJGYSpbtenZqTiKMRSBkV9p9qcnCnEc3bt7f6qk
      Vlq6JOcm8jKEMQBI6FkBQjMkDgBEEBQA8Hf+8Foi0WPNE4n+6OpVSG8DtzXsWzGj4rif5qha
      3wkAfvfurX6zTdAin5b8AP7WFz/vWNaNS6f43HRv48G1K+dxihv6UY4nmNREu7LS0UwfYlk2
      fvvtdzghXy6oru8Qvh4TvB3gPEeQWERxxc986rnRNj7h6Xki0YeffwXCEMMWjP6AFlJe4FAo
      Oo/hmm6wLBtMagQjO3rt6kYPAChISro4ObS8yeMnotDva5YscxCiNCtQiMobvsgyAk/+xpe+
      ZLuhbbspVcZC24+QCCE5hrh89j1enRtluxOeESOW6D+6XAuTmcRxZsQSPZvhYpDchY0xTwJU
      27gf88WsSBmWJfA8SeAble3QD2emJzEM831jbXUnhuj8vj0cgd24cik3vaRKdGVrZ2ZuJgpD
      HMPiyN9u9mcmCmEU3bt7d2Yis9nUJCVXzitxHEEIIt8JEIohcQRABMUAAH/vv15PJHqseSLR
      V65dg9R25Ggsg66stX/n7/7tW9eveI518v1T5emJodELdS+mhAc71d9863OuY1+/cEosznQ3
      lq9fvUQyvOaF+YcSvb3a080A4nke+d73diXaC1zC1yOctUNS4AgSDclEoj8RPJHo5174DIQh
      gqCha8jpMoGgLxz/VOA5Wl9neDaIygxGDJ1IyUgAAFFJZSemh5Y7dfxEGAUDzTwk8TFAaZan
      QEYyfIGlBY78rV//9ccSjQZWEKMhIHiGuHTuPSE9P8JmJzwrRizRX71aTyR6rBmxRBdlJpHo
      sWY3QDvr9yKuWEwx/eZO3YSLMyUIIUEQYRQhEGIEqXdqW43+4tISgUQP7txOTy+mRRZGIYph
      MQQUSbiuW99akydmNu6vCAIzOzcbxxAAABDE0HWOFwgCC6OYpkjX9WiaQRAAAPgHX72RSPRY
      s1uRePX6DUhVH8TdWsOKxEx15ablmEiID0IwodBCZhINrROfevn8mdOO59v91oVby4WMgoTu
      Tq2TKs//4tHps9futTrWX/4bc7cunfUJ6v7tq41BsG9PeWWnlyVsy6MQnqdx9NUX9//Xb578
      7d/+ayw54s4v4ZmAQAghhNVqDYDIHvYiSBIMCxCExKGlDe0YK2RkFCNEGluvthWJ9UKABE6E
      EggCLn/4/sTeo5lMeu9U/s69VUlRytOlZrVumpbnGAgl5NNSZ2DSaIAT3Mb6/Z1B8MXPvXR3
      tZpVRZIWVUVICsrGnRFL9J9cb0RJOcc4M+JxROWpOAnQOPMwQPDa5YuQFJbKyvXNvqt3Xn/t
      Mxc//HD24DGBITAUhXEchiGKE1hkX7i+/OLzRwKz13aw6bwSxgDE4aDX4tQyhQSepVW6HhXq
      mhPvW9qDIghJkr4fNOpVUU5zLIOhYNhtoUoxzVMAgH/0tZvJEDbW7PZAjXrDQ3qzMjz34UmM
      Ul5/DXqu9fY3vimlJQKPzHqbkFL5PUefn5UNrf/+qVMTEnFzs3OZ5kQyxlCk1e7+0q/9xqVL
      H2rdxtSRX+zX67iovPPOu5ivD3xy34GDnZ0HZt/KLh7yGg86enTizV8RyaTj+STw0IHg8t3b
      McnP5qXVSpvi+fnJwt1btyrV+tTiEhk5MEZZQWCltIAHd5e3Ugof+CFO0VEYxigWO0OC5vOl
      crOyilE0L+d8S8sV87VqzdR6GM37IWTwCMNJ3XQJJACAwFmepfF0KpVI9LgzYon+xs1mItFj
      zYglmqfxJEBjzV8sQJWVuzu94eK+gyQaOW7AsCweGZfvVANLf/GlF2mCXFtZLUxPEgDBCSKI
      4u3Ntbk9S63K6sDHCBDOz8/HcRzFAMQ+QXEAgH/89dvJEDbW/MUC1Gs3h7pz8vRp3xrQGNEw
      4W+/9fzFs2dwDK1sr7GsSlL4nbU1HtoDG+g+MpXB2n1Xwi0olnr1rZtXLlNSlqbx0BuIyvxL
      Lx74GbUq4efGXyxA5bkFrKNzLO2HEUsSlg8YMf2rv/IWTpKhZwqC3BsYSkryjH6MkhHAZZFC
      AEkAr9G35vbud0PspRef62iuyGEA0D+jJiX8PBmxRH/nTjtKyjnGmRFLNI4iSFLOMc48DhC8
      cvF8TPJLc1MIhkdxXKtWU6pK00yrUZ8spM7d2Q7M/pHnDtM0Q+JoFPpOjNEkAaKAoGjP9VAE
      ojiJYxgSWlfubR87MB8juO95NIVHAI98x7ZdlmeMbm8Yg4WZWRwFAID//Rt3Eokea570QM1m
      ywPd5oNLa61ocnYSxyJy5fa9LW3P3qmijF26cJYkaSy07qzsTE9mEIg2LTiVE0LPC4Kg3bdS
      aUWhoFzeT1m1Ww/qdm9r6IHtzZ2ZhVkitAAlwgjGbrvdi/h8Op/NM8nuHJ8IHjsQXL1/F5J8
      7GqbK5XiwYMSCnECG+iOLNBpVa3UmhhJcwToa4bA0wiCRRAJYijSpOtYmunKqVRt9c6+E687
      Woej8K5uEAQ51A1ZYmOUsvU+zYmerWE47cdA4mmM4GSRTWaix50RS/R373WSp/FjzYglOoph
      chc21jybHujKpXMhyu5bmO512z3TK2RUimKUlLJ89yYk+XIuZfT71YG1OD9FkZRpOTSJETQH
      4jAZwsadZ9MDtVtt1/Uf3LnKcjLB0DsPrrsxf+LN11td88WjxTPnL7QrDbqQW7vzUQhoQRKc
      YW/h4KcOL00/k6snjJBnE6DFxcUQY7DIpVgBAgAiD8UYieOZvZPtYbA4P3dg/+EYRWPXMA39
      yt2tz3zqFSldeCaXThgtI5bo9x50k3VhY82IJdryo0Six5onAbpx9fLQjY8cXERQ3LTsdCaz
      fv9WRAi5lMiyjB+BwLVphokBCFwHQiDKqWvnT7JSyobMnuliHPoxQHmO9oM48B3PiyiK7HQ6
      c1P5m3fXSlMzJIZ22lUAmWw+raZSDxcW/tPv3Eskeqx5EqBOp20Z7mlTx43mIKCOvPJLFI6u
      r1z/cGcgZHIHp6RKc1jdbqXKeRZCV2tMH32jN+hfvbXsWMPqnv0gMtwhiHguz0EXZ1Bdr+tW
      aWpGxn0hP9XevFvr2i4ShPWGyahfeOsNjqLRZHfN8eeJA+1U1ocuVDgcoAQECCelQ7NreLFn
      mSlVtv3YM3VZUdoDIy2Lvj0UMiXP0qMwDHwvQgiGwqIAIjgSRpBmqMixe0MrlVJLOXVtdU1J
      Z7p9XZHZ2I9021NEGsVZgWeS2/hxZ8QSfWqln8RnrBmxRPctL9lofKzBAQAAwju3riGUaOu9
      pf0HLdvBYBjEoFuvpaZnGBhhBFGvbAi5KQYNLDemaCqTEq5fuy5nSwJN9DtdFwGlTIZhKNuL
      MBiKqbRvDS3LeFDpFDnYHgbFufkURzi2iwAQhGE2XyQwBADwu999kAxhYw0OAIAAdPrGsaNz
      59ZvfeOP75kEM6miw7bTc+NCtWbqTRhhkzOz9yuXfb3heJiYyr/xi0dcyDJh/6Mr1VrDyOex
      a+d0XFIlwh9o+qfe+FJ15bqttZXp50yzfe70pVytobARwCRt+wEUS7/0uddZmsKxpO8Ze3YX
      FnabdSvCWBJxDGPowazKh17o+CHEMCL2cIqlaXo4NCCMMIygaDaTVeuVDZKTh/0uLykoCg1N
      73fq9WF0aKFcmJw1+00/xhiWR2Pfdb0QRq4XCoJo6z2CFXAU4gTLc3Qi0ePOiCX6w/VBMhM9
      1oxYouuak0j0WPMoQBDevnkVpUUY+mo6w3MsjCPL9XudVjqlUiwThjD2zK7p81jYNbw49Ken
      p03T5AQxDAKaxGKA+Z6HIoDnWdu2N7Yqk5NzOImLJLx5b21iagYFsNetgZhOZ9VcLvtwJvr/
      eWc5GcLGmkf7RAPYHZhHj8y+96dfGYB0Ic9Zna6FyjkVfHT2Q6BM5EUUBTEpFHuhceTYsXPn
      L/ZatXajnp9eCPyw0hqUZQxnpEGjYpLpV4/MNmpb9+5uHnvphRC3hPxkY/12W/dt6Ae1us1l
      Pv/mZ1maIfBkKnrseVIT3Ws17AijcagN7ZwqIATTbPdknuz3BpSQEhjc1HVWVgUK2W70FVkA
      cei6rpzKNBvNRq0yM7+Xoal+r83xEkSw0DUZVrD9aHoit7G+nspku72BLHEwjIeWK4s0gjEc
      SyUSPe6MWKIvbGqJRI81I5boja4VJh3QOPNjAwTj6PrVjxhRGvYGhek5Eo22q81yMcuwnO0F
      aYk59cG5w0eOoDgFfavVaCoTZSLw4hgiFEPghGebvX5//6EDF0+fnNxzEMfQ7fUHiweOGMOh
      LDKu7zU61sJM6V+9t5IMYWPNjw1QHHmGCyenuJsXzt3b7pZUMnKG/U5zc3OnMDP71i+/wTDM
      6q0rfQ8yJGHqDtHvUE7Q6XQCPvX8YunqhetYprjv4AEche+/9+7Boy9oRu9bX/lDdWqypQcT
      UkRKM2Cm9PNsasLPgh/vQBC2GlVIsNBzIpxmSdSxncB3OUEGKKqqKa3fp3EwsKPIGZKMiJMI
      GgPXdXGS8MLYNXRaUCYK2Z3KBiPIhulIAhWHUDMsVeacENIkwzJkItHjzogl+nJFh0hyMz/G
      jFii7zeNRKLHmo8P0KC+dnt7SKMxisN0KotTzERe/fD0ydnFwxAG2+sb+w4fGWoDWWQ9P2j0
      zD2T2f7Qunnj1guHZq+v1JRUcaac9hwrigGJASfCCBzHEZ+gRJYhf+/91WQIG2s+PkC+bVp+
      FPpDLzQ3Hyx3XPzv/M5v4Aj84M+/N3/omGEMv/enfyxlJyo9ay6Fkcrk5WbFDQKC4ULbvn3z
      KsFsVzZkhMDZUNPt0EWErEIjIMKo9CsvJScWjj0f70C+PVzZrEqyytAYiKHhBNPlYm17k5fV
      gT6UeRYCoGnDlMR7EUJSJIVGfTPgaJKlMMv1/SA0TUeSBeA7ECMjiFAE9tGFU5nJw/sWJhKJ
      HndGLNHXdgyYzESPMyOW6BvbgyBOAjTG7B62cvb0SUVkt9uuIOL9djubL5mu5znh4tIeAgQc
      L/ihv/xgc6pc5EQeIJipa4Xy9J0bVzLptCjLluNV1lcZCo+Z1Ewhvby6OlUuq7lCYA5M275+
      b2uxLNU7xuTcPE3RjqGXp6YwFAEA/NvT68kQNtbs9kC6psss1mxpC7OTH90xqrXLFMYXpgsI
      dM6+f9JnVZ5BeQy89/5mupyngwGAaN+jeq1at9PodoYBxU8rZK+h67BRWaHEFP7ByeWDJ17v
      VFehp/PpedOysinuG998e+9sfmtt/ZW3fqOoMAyd7PQ79uzWRGuazpJYTzcN20srIgCx6wYs
      y0iiUNncpDkOoASFI64bkCQaAZxAIU7xgTtEUCwOQzuAOAxImnZs2wsBzxKBH6TzJd/oexAj
      CBKHXr0zLGQkJ0SdoSZIEoIiDJ3URI89I5boW3UzkeixZsQSfXGjFyQd0Dize2rzjSuXEEYq
      qQLOyYNOK5WSrt9e/uynj5967535A0cBBJFnRgBTJMH1A9sy+60Gq5ZkiQ8dUy2UN1buoaGf
      KU9jGGEOdYYmIETq1Q2Mz6ZkbtAdLEymzlzbfP7QvKF164P4xPMHHy4K+w9nNpIhbKzZ7YF6
      uhm2Oo0G5be3yFT5fnWwNJkCACFw+MHJMwiBqEw4GIKQZnC7nZnar9eroGeH3lASeLFvu4OG
      PjA2uwbhDyqVFqVkCxLmuG6ED23Pni4WUbxgD5pnPzLLQtzrhHfUVDnFcSwz2sYnPD27DmRo
      vb7pCyTAWEnvdRRF7BveVDFX29mmGNZyAokjwwgEgR9BKAhiHHhDw0IJQuBYFCdgFCIQxnEY
      IaRtaDs71bmFvTiGmIYJUVwSBZGjt2tNRWC9EBI4HkJA4ChNJTXRY8+IJfpe00rKOcaaEUv0
      6ZVOItFjzaNTm7dWdnqGqqYxBIkAsrOxsnTwsKabLBFbbpifmFp7cCf0/PJMGSdYfaCzNBoD
      rL61RioFRWD6A2OuwJ+7XT26f9bodxo2un8650ZY5GimYWRmlvx+3TIGbY+NeusBKX765Vco
      HAAAfv/sZjKEjTW7AarXGrwinnzn7dnFI1v16lRGPvVnX+947Ox0JnQHXS2yB62BZvZMIxp2
      1mu6WigoVBzYtt8xfN+aLM1gk2mz17x4zSzQUdsA21ubKh0iOFOt7Lw1MXX3/nKvsX34F36z
      1V29cvnS4t69DEWzDDnaxic8PbsOBOOwUqmKkkgQRF83FZGPfFc3PUkRERjhOBPHAYAwCn2U
      ZAxdr9cqM/OLBApM0wIYIQo8xxD1Rk/kySBCMBxHYBQCPHYNkuVZThj2WgTDkhQXenYYhSiC
      IBhJElgi0ePOiCV6uWMDkEj0GDNiiX7nTiuR6LFmt5zj1rUrIUKlVQEAlKRZfaD1OvXixBSO
      YQjJ9mqVpSNHmpUNgDMojhEgNOyw26zQco6H+vaQnstzLC/YtvVgdXP/vkXb9gCIcARwPO/a
      5sBFVdxe7wXzJbnTakM2dXhpHkUQAMB/vrCVDGFjzW4P1B3oqG/c32IU1IzjaGtnUNozXz33
      gec4r37xd0xDtwz9/vKDQbtVbfZ5gaOFrCoTKiHOlJVBGJ869T7EpReOLUa+8853v5stFAPf
      ZVg+8HzH6Jf2HisV+Pbt686Ahr4bUroqcRzDcSw12sYnPD27DuQ5ZrtniCKHg8iHqDkcsiwb
      hiFJkpwgeeagb3gchXKi7NkWStK2ZXMMiWAEQ6JehFp6n+U52wkoEg+CgCAICBDPNnGCCCLI
      8TyFwa5m01gMMRLHMAgjFCMJHE0ketwZsUSv91yAJOUcY8yIJfqbN2qJRI81uwGK3d7FW5XY
      97K5HIlFQRDZtsUqWRJFAtdI5SY31+7HfpAt5eIg0G2kkJNda4jipOf7OEENGlt9nzqwd0Zi
      8fMXLhteiGHEvsUFGDj1rpXPpXEQ5CZKH/75B3wqnVbVhYXZhxL9R5e2kyFsrHm8R2LYbrW7
      m/fuS5OZrKBinhUAbUdPIZ0gwBWHCg3D9UN9zfL6tQBTlldRT6tBjFmYn1vZrmU5BALundPN
      z7x4cOXBMi8wlJi9s7zJhoNWR1vZkhWB+eJs2bLcjOr9+ekzFEPxLM9zSU302PNkJtp2gzj0
      bS9gacpzzAiiNMujsXvuzJmlF17LibjhhCyNx2GAEjSEwLMNgqJJAjcdjyawfrthxPT+hSld
      1zEUAQgaAwQDsev5UQwYmhQEzrJcmsRanQHPMxhGYhiSSPS4M2KJrgw8kJRzjDMjluj/dqXq
      R6P9CglPxW6A3F7lzJ2mq3cUNpZnXyww/oWrdw8dXKRpRjPs2sbq/OKibtgohgkUSlCs5bra
      wMBDi0nnaJKyDXPQbZECp/eHe+bntytramFGkuW8yn/tq//9yMG996rNQ4t7cRzTh86gUy9M
      liUlJzDEH39UTYawsWZ3CHNaqx/VEWA282wk7H01R/vnLl5uVNZ8P547esJu14btbcBnDR/m
      RQr6bt2w5yZniGDYCXAq6K+uNSbm9rB07BnD4cBBBCkK3EKhqNLgzmpFkVQLREzsDgaarJQ9
      DHJQx+WFV48fSBxo3NkNUBz6bghAHOIoQEkWQ6DjuKHvEDRjWS5Lk1EYAAyPYwAiD0FxN4h4
      lkFgHAEEAbFjOzRNhRABURgEPkUzYRiSNIcjEU4QtmV5QYyjECAIgVNRHPhBQNNcMhP9CWDE
      El3TfZAcnTrOjFii/+BCxY+Tc7/HmEcS3d364G7L1dopNpbmjhcZ//yVO4cOLlIUrZlOfWN1
      fu9ezbAxDBMoFKc423so0SadzjMEaZnmoNumBFbrGXvn5yvba2phRpblvEx949vvvHD8eBD4
      tmlMzOyxW+t36s7nXnn+4XX/5NpOMoSNNY8OW4kCRlQZNMixkZDNp2hfUbYvnf0gDMHMc8cR
      FLt27iQQsoYH8yIJfa82tOanZonArm5uU/5gZbVWnt/DBI5n6GdObqOitLVzsVCciOZnWCw8
      f+Fy4OmKkrYgO9xZ61txrZbDSU4S2NE2PuHpeSLRXoSAOMQQgJIMhkDX9aLAxUnadjyGIqIo
      RFAshgBEAUAxP4hYhn4o0SiIHdejKTKEAERRGAQkTYVhRNIMS5H9fo+kKD+IaIpAMTKOAhRB
      ojhCMQIBMJHocWfEEt00AySZiR5ndk9tNs2h4/ooikKAyCI30IaCJNMkAQBwXZemaQBA6HsA
      I3AMffgiiaMBRCkCBwDEUeT5PobjJEFAGEcRxHEMAGBbBkrQD38OACDwXd2weY4lKerh0/j/
      5Q+u2kk9xziz60Afnv0wDMGLLy5dvd76xdePXbx4aWayYHgx9NxWr1+aKAeOFoUQYaS0LNS3
      tz0Uf3lv9t0btYwi45Huu74ZE45t752Z1Af1gYXzovDaqy+fO/2uWlro9/siT5OMJERG0wvq
      TePzv/w5hkAAADuakwxhY83u8MELcjabSavpTDpFkFQ2mzF1LY48w3Q5KQUDG8HoQbfR62u+
      1d/Y2ooAjuBk7DtIHA8NzQ5gHAaSJLdqFcONPFP3gnB7u1qaKG/cv7O5vWP5wLOHBEk4jk/i
      6NbGSqXaGG3LE54JI3agL/y7i8kQNtaMOEAEQWAYNqovkPD07Eq0MdQsx0MxFEI0JfO9viYp
      KYYiAQCO4zAMAwAIfBdgJIGhD18kCSyIUZp8KNGh63kYTlIkAWEcRpDAMQCAZegoyTIUAQBw
      HYdimB8ooP/cvz6T9EBjza5Enz1/Po6R48eXrlxvvvHa0atXr02VspobIr7f7g+KpVJg61EE
      EEbMKMLO1laAUS8vZt+9Xk3LMhbpgRdYkHRse8/UhK41+hbO8fwbr79y4cz7jKRaLqRIDCA4
      iXtITNi2e+DEp7MCBQBoDt1EoseaXYkWRDmTyShyKqOmcILKZDKWaeAItGyfl9NI5GEkqw9a
      mjb0rcH2Tj1GSRQnYRRgCGo7lhchMAplRem0dqwARI4JEWR7u1osl2sbK+3eoD90GQqHGNVv
      bDaazfsr65tbldG2POGZ8DN3IGfY8zBe5nYXoQau+WBte+/iIomjrut++T9csoPkYeoYk0h0
      wlPx6GEqDFfuLw9tR2AoH2Nn8tKDtcq+A4c4mgAA1Ov1YrEIADB1jRZkHAUPX+RIDOEUkSEB
      AOZwYPsQQ4CqpjzTCAmao4jQs3pGIJBwrVLfs7hIE7Be7xeL2ceXf/3/+yCR6LHmcYCC7XqP
      IsBSSXxgsIKccqz7l0+/bXoxzqcDq0+SmDUY+KigpIWCIly+tjK9MDkjEZfX2iJP9asbnJKJ
      CQG4XVaUtEY3pGhRzbqNdd1HJycnX3nt1Y/OnvFQz6h2Q179/FtvMgQKAOiaXiLRY81ugBCA
      TUwUcQwSrJhFaQBAoViIAxEieG9gisUlAjpgcqrbtwWJDh1nerpcyBdEDpuPeZEjhgJDspId
      Ap7MmsYwpxbcMJBSGZcJrm1qRw4uLt+9J6VSpu9NvTCnGWa7ugoIMZdRRtr2hGfAz9iBYBzF
      AMN+9PN213V/8z9edhKJHmcSiU54Kp7URPuubdqu7QaKxAdBwNGkHcDQ91Q1BQCwTAMgGMex
      AIDQd0OAx77tBEBVxN2P+z5J7u66Ouj3KIqKEYJnKcuyaBIPYpSmCACAY1kEw+CPCulf/ZdJ
      Qdl48yRAjdWbJ2/WDh85+MGffbV46PU9ovXtiyt6r7c4U1aLE81GbSKb8hBGouJ+p5c7cLy9
      emfP3oX3L57GaDGAqD5o8xSBUtye/UfOvf2VmOBcVDi8d65WX1U4bmDhosIgrtPtDbhc6Rde
      /TSNowCAgR0kARprdnsCGLqr1W65PHFg38LU4qHYGRA0zxHk0r65GCWjwOc5znXsIAwbzbbt
      +jRBiDzd62t+BDEMYWlKSSl+DDAUURR5emGRZVmZQqq1VmFiBkZhHAUCz3E8HwMk9r3N9eWk
      nOOTwYgd6K/+/hUnTHqgMSaR6ISn4kcsLIRRYDl+EEaKvCvIceg7AeRoYmhaoiB4jtnVbFFg
      BF74MT8WtptNJZMjHt3Am6bB8cIPb4b48r84aSUz0ePMjwhQ6HR+79/8l1/54uffe3+jkBUI
      EA8DiMWYqCp3rl5480t/feXGJVVVbt7qIp5BcakIpRjcQQDpByFEMYJmX3nhwAenThbKU6bj
      wsCJIkJMq6jfx0mlMxjwDCGKHM1l5qaLhhcmEj3W/IgpPgQlTrx0vLq1ISgqzXDQt0VJdh0X
      AiSlyJZlq7vNjikAAA/7SURBVIrUaDYJkkJxkiIxjqYxjo8c0w98L0RoAoUAnSjlOp2+qkgs
      y1A4aXs+LYiD+rZuWgjBDJtVLpX5+bc24ZkzGgeq7VQLpQnf8/7Gf7rqhMlM9BiTSHTCU7F7
      VsZwaIriEyOOfKer25mM+niEswzNjVBVFofDoSiKj9/5+J+G1kcprteqcXJGlR/+KOh5Poj8
      aqMzOTVF4thQ6yMEg8KQZnkMRQAAx3/3/cSBxppdib5x/fqJY/u/9d7FQobDEFTvttshP52l
      cBSzDGv2uZf669c9nIttu6NrmWyOiP0IAjcEjh+++vzS5RvLzWbz87/21qXLV3ECS0kSw4u9
      4cCzwXMzyo21yrXbK1P5NAj6O10/CNxf/pUviAwBAHCCyEnuwsaZR11M5N2/d9+2fYwV0diH
      GMWQGMWJ0B12Ol3D8TP5omcbURRLap4jsTAMPdeLwogXhDgKoyjKTUzxNKnIsiTxYRg1G80I
      oNm0TLGcqmZYIm51+xDBWApnOH5nazWZif5k8DEOFEfB2ur61PweCn/2WyC4rvs3/+BaUs4x
      1iQSnfBU/OBEYhy4pg9EjgYQOo4VRKj4I7aBgq16TUznGRLVdVOSHjl1HOmWIwk8ALDVaEqy
      4PgRjlPCoyMNfNeKEIqhnlz02P/1XiLRY80PBigyWrdrgPa7MLDXtzdjC8tOFXXLE2kci20X
      chjHfO7Tx69cPK8WJyFBNdaWs8WS6wUYRbIYcBE2L6KtvtHqaJ8+OPGHf3Y6n5ubm87ZthHa
      Qzmd062AIDAKDUi+cHBpJohgECVD2Bjzg2aD4NSwU7MsS7OjYj6/Z8+MafvlclGSRcu0XC8W
      BRZCUCpPGEMdQmR6bi4OPQhhFEUxQCSRj+MYoPjc7DTFCEcP7pckptMd0LyYyyi6pgMUFzmm
      1+9q2nAkDU54tozEgeDO1oaQLlE4+Ft/eMNNyjnGmUSiE56Kj9kn2tL7PiAc2yoW8gAATdNk
      WQYAuJbe7FvT5WIUuN2ermSyJPaDxRq9VpNLZWy9z/Fcb2DkcrkfXp3x3D951/SSHmiM+ZgA
      Ve5fPX9/x3LBhMrxapqlGWh1Cvterq3ePHz48OWL51x3WNnsCymeoeg4ikIE0nxm34R4v9Lu
      dtpf/uKvvvPtr88dOHz5o7t7lpZ4xBhYAJBERmJpPrNndiKGIFHoseZjpgc5OaOohf3TqQAC
      hOQFGrdcL/D9fCa1tdMAAGA4ncvnBFHKKWyv2w8QcrpcAAhAEGRmds43OoX5g4amlYp5DI0N
      0wnDOJNSevWanMv/XBqY8LPlmTlQHPobW9Xp2Vkc/fhTmJuNRi5f8Dz3f/3KTTcp5xhnRizR
      GI6jaCLRY8wTB6pVtwWRCxE6JXJx7DfrnXShRGIAADAYDESWerBWmV1YYEgcANCsV9V8mXg0
      AA41jZflx8MhjALd8uLAU1T1YXdk27bvuSTNsgzt2DbFsg/f/Nw/SWaix5snAfrwe193MNEM
      sanJooC5tZpRWpjPK9ytm/elfO6VpcLNu3euXb89M11yfb/dalFoQHMKKaqDnfXC5AKK+ZHv
      aj1HLeaG/Z6YKbuDBooFIMYbekChfoZHNxtaoTzfb9dZBhRmjhzcUx5hyxOeCU8CtPDcca3V
      anv43HS5V99WFATHMHs4QHCMF2WMZJ9/6bW4X0Fott7qL+yZd4Z6KpWudgaqzDteIAoYguGl
      Yn6725cYUhZ5H1URAvhDh7YG+XyJBP4EoDRdn5gsh4Gdz6ZG2OyEZ8WIHejvf/VWItFjzYgD
      BBEM/TGbvySMBU+GsMiz6n079u2pqakffp+hdXuGP1Uuft89OrQsm+M4AEC/3XBiopRP/9gP
      ThQRBAAALMt6+JGHPP/P/jyR6LHmSYC8Qe0rf3I6tPS9pTTKqumcwgjS1q2rOKe+8OpnVm/d
      Pnrk8MWzp0PPsSIyjGKSQvqNRi5X2HvkheV760cOL737ra85KCswVFe3oTOghNSxE59Zu3v7
      6NEj7377a15MRSTlmUMeD90A33fi07O5ZIeysedJgDCKWyhlaXkfDx2M4LM5WbODXLGMkVxa
      lY2MslVtEARBkNSg3ubUvCrTMiesra2/khK7IlWt1SOAYjiZz+clNTYHPEkzaUWyMspWtS6p
      WQKjQ4oMHQmGNgbIXFYFIOl7xp6ncqAo9LShq6akn+7jruv+w6/dTiR6rBmxRAcQRZNjv8eZ
      n+jYb2fY11zo2ubM9A/4New0az6gS/m0bWh905so5H7o07C6XS0UC5vrG+lMmmDEyLNEWX4o
      4yf+ebKwcLz5iQLU2V751vk7tmHmUoqgptMyz7NUr2ccfvHFuyvbRw8sfHDyPX2g6YAUIpMS
      1DCOY88uLhxmQq2tGX3dOdhvMIXp9779dZ/MFSfTuO8K6YmlhR9xu5cwXvxEAWLE1FSxLEhU
      HKAUx2UFwkep9vJWWhZSPFlr9ymKUtJZgaCpyI1Cb32nNz01mc+k3L7D8MjebKGYl++ubc4u
      HgAo54CARGKKon7WbUv4OfBTOlAUekPTV+QfscFU4NrtgVksZD+2qsN13X/09btesipjnBmx
      RDsRSMo5xprd3Tk21tZliYOkqErc9/+3bQz8EMQ4nRKYxy9q2gDDCEHgu91uWlUrG6upwrTA
      4t2ulk4/ekQaBV3dSqdkAOB2ZVtNiUPbpxlBEf+HZYqf/r+TfaLHm10HOv/eNzxCtCNyZiYb
      2zFDUwTH8xydY8KrD6oBwog86ehdgmQDgHM8pXX70HdxJf+lv/TZ5Xt3mVoD58X68n1RTUcx
      iDFMJEBEqynSb2vGYOi+tJj/o7dPqZnZucmMbQ0/+wtvstRPpF8J/5Oz+1s8cPyVQbujx9Ts
      dCGwgaH1GNR18SwjgkOHlHqrF8Vxip/Y3tzE5ZIkKxwadwe2lEpBiGQLecuNUIDs3bffsk3H
      i0iGojCUFiUqMrkYy+U5RqBeeemE5QEvCLPFUqe2nhy28sngxzrQUBuwovwDBc6eYyEEQz6j
      nTpc1/3f/vReItFjzYgl2vBhMhM91uwOYaFrVFpG5Fl79iwAACCM9aEhS9JQ1z0/yGTSAIDA
      Ne8+WFPTGRBH6XzxYXE0AGCoDzw/zmRUEIfNziCf+6HtVyO/rdlZVf7hy3/2/z2dSPRYsxuC
      QG9+7ZvvR7Y5n5fFbMlDadpteVTWt7ogjtVUqtoa/vW/9utDXecx//ztLQbxcZLhBKHVNSjc
      h1G8cOj40b3FS2dP9XVPTIkcL4kUXF9dn993oNtuabqB0WKKcjU7Ovry5/aU1dE2O+FZsRsg
      jBYOzk1SksqGlpzNN3t6fnJ/X7OFnIAQjN6uppRUDEEmm6FIsLhvH3A0FCNEWRZUn4IWQbEE
      ha+urEzOzsumx3IMg8a6409NTliWq6QUUZQYKc2hjuIGBIZUNpYTif5kMGIH+j++dd+LRnX9
      hGfAiAOkuTGSSPQ48wxm80LP2qr1oG+l8kVV/uHisljTTM/qNzX3wNLiwwr6VruVy+YAAL/w
      rz5IJHqseQYBcq3uf//6NzEQHDpyYHOrVc6yBJvyfdcO8Qwf6R7MpkrH9hXWmuZ3/tsfxGyq
      NDlTW71SmH3huf2zT3/1hNHyDAKEU9yRA4sEz4kcHUdoRhWDCHgekaKoMHBnilkCEChBZ1SZ
      8mdwRgwRsPfgERTQT3/phJEzYgf6P7/zIJHosWbEAeraEYIkEj3G7A5hW6v3WSnlRNhU4Ucs
      DgQAAAAb9TrLS5LIwzjaWF0RMsXs963H8B0rQAiOJg2tu7qxvXf/QY4iAADNZjOfzwMAjKHO
      8OIPPFx789+cSSR6rNkN0J2bl3YGPuKhpbkyBDEFgzBGNcsXJJ5FQs/3GwN3Is+hEVbVvN96
      47leQItW588ufNh3kOkMNRzopmGGjFIq5F59+bhh3r3ywffMAOC04hgdiWN6mh4idFrh8+nU
      Rzfv/5W/8pdpIul4PgnsBmh68VjWHnhGDGlWSYlYYPU1U8qIskgu37oWQKKQy+cLktHtF3MS
      JRfwyi2NlERBUlQKgHh2oWCbQ9e3XYRFAMjn8rEv5nCy1zez2b0s4mXypU5fl0U28N1sPl/Z
      WKZZOZmJ/gTwcQ4EoTHUSYanyI+/X3Nsi6AY/CfeLMF13X/69oqflHOMMyOW6KYZJBI91uz2
      KxvLdzhJdSJ8upQBAMA41Ib242O/HxMFruWDfrMSIMz8VKHV0/PZJ9I9GPQRBJMfTUbDOFxb
      WRYzEzlVAgDAKNBMV5H+h4Ucb/3e2USix5rdAN27c7Xad1EXLc5NQADx2GrXjYgWMlxAC+pW
      c7h3QjK1HuSU8vSB1sbK3N79773z3Z2dZmZigiDpiWzq8pXrNC+keSKMMcPyaFF65bkpA4p0
      d+v3v7tcSHHQM9oDF9K8wqJv/qVfTWqiPxns/hZnlo7lbc0z4phiUikRg54s9GNalqnACxGU
      FBSZFHhBULMEzaD5QhDFKTUtSCnD8TJpNQy8YrmsqiqJQsu0M3me41khPQFqdwyKWtyzkBI5
      JLTkgYEwosAQSU30J4YRO9A/f2fVT2aix5kRB2hH9xOJHmseiQiEN2/flllCKszLHAG+rywa
      Qri5tkxwqXIx+/hjUeAYLpQF1tI6NiR91y19374cvV4Xw0j5+xy822qIaq5RWSGEXDH7ZOT6
      wr89l0j0WPPYZOGZd76FMyyXX8yKoTkEKAJkNr69qf3tv/mFetc9rHjf+fa3dN0V8ypu6n7k
      9k0kUyy98dK+9//0G7yau3YNYCicKGQvX7vLi5SIERFOWHbISWzYr3uk+suff6vdbLjbO3ce
      iK+9/DyR7K35ieBxgJDPvv5abxhQvEyT0VRZRBAQ+QakUhghSkxU79tpJVUu813TmSyXfN8x
      DattAZpTy5NT83vm1istnkGjIJyenkqpAh4jpmWXyjJDww6JYmyKxBBRVnAvwnywtbFC0lIi
      0Z8AfnoHCnwPoDiB//RbI7iu+y/fW0skeqwZsURXBh5IJHqc2R3C2vVqW3dkkZsolQAAzrBr
      uHGAkKXMk9WAcRQYlieJfL2y1tK8TEadKO6e+eVZg6FPZhQOAOA7ZoBQHE0AABq1WrZU2rx/
      W8hO5dRdpx7qGifIDxXoS//+fCLRY83u9i53H6xNyPi7N3sF7pyD5j+zTz5/c90OUD/wZMob
      DkLAspLEWe3W0stvLuaZnY538cz7UQxdQOdVLnKNnoWrKQZGga1pMasuLkzdvXwBkYpf/nKp
      026srm/2HCAiet8KcUb59S/9WuLQnwwelXNMFnq6+6ljBTQYAibPiODYMXljswoIPJ9iPSMw
      o1gSWVNWpopZHLdzWVQRnjeGgwBjWdRHsELWhxBFKvdu4Jw6NV2GcVSamqbEHAqgJKVwBmZI
      VqIiywstD+5sLRNUMhP9SeDZOhD0XBcjSPwnO4jZdd1//f56MoKNNSOW6PWeC8DHH5GZ8D8t
      /z/LJSnUWeKbuQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Map' width='192'>
      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
    </thumbnail>
    <thumbnail height='99' name='Sheet 3' width='136'>
      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
    </thumbnail>
    <thumbnail height='192' name='MapBoard' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAIAAADdvvtQAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAgAElEQVR4nOy9d5xlV3Umuk9O95ybc9Wt3NVJHSWhRgmBJHIc
      G/BgBoMNfjAYj+E94MfYYxjb45/HM/bzm4fDs7HNGBNNEMESklBOLalz7q6cbt0cTw77/bG6
      T9+u1NVdXd2Nqe8Pqevec09cZ+1vr/WttQmMMdrABq4W5I0+gQ38fGPDgDawJmwY0AbWhA0D
      2sCasGFAG1gTNgxoA2vChgFtYE3YMKANrAkbBrSBNWHDgDawJmwY0AbWhA0D2sCasGFAG1gT
      NgxoA2vChgFtYE3YMKANrAkbBrSBNWHDgDawJmwY0AbWhA0D2sCasGFAG1gT6Bt9Ar/QeOGZ
      nyVzmxlkafVysHuQwIiwWpapl3Vue39sptjoy2X//u+/sr0/LaS3BQPc1MipXF9ftaH3pEIe
      GyBcNxIJ3dhL2DCgGwlXb5088kKxqvMkZZ2ZzETDpOdtSgdMsvvMyRP7T4z9+gd/RZ0bPWCq
      rYNT/Zv6Agw6duwkw9Cl+Zm9e3ffDI+P+uIXv4gQUqv5qYqenxiNJJOdoxr27CcffaSs4bOn
      jvf19nb+Uq9MHxwpdiXF5587lsulF+3Z+dfvfffwqUkKudXCmEGFPMfiOfayJ6RXpo9NVhrl
      YiweQwg9+dRTfb29CHmnTp2Jx2NPPflUb1/vynu4AnhOrdEWeG7J7374L19vqDiaStGXjvPt
      Ro1g0bNPHezt61rj8duqmu4ekHmmd6C/J9cVkENBkST4IMuwIYlFjNDTnQ2GlGS6Z3h4UAoo
      maisxFLxaCQsC6rtmbp5wz3QeQNqzJ07OW/OnD5aKs/kq+bosZdeOnR6eMvmky/+lMru3ZQN
      P/zQt89MFAXK/NnPnkIU/fijj5q6evz0CClwT/34kbmm1p4fffK5/TztPff8fjIQiyrMd7/9
      vT133jN+6jhN6tMzc9//6YuMU33uhVdMrfboswe3bN0ydmz/Tx59ErnWQz95rGdwi12f/e5D
      P0bYm8yXW7o9dnz/yFwjP3mmWFMV1JhpUS8++dMTo7PlqVMVHZ14+cliw3jmiZ9NzNeGB3t/
      8r1vPPfCK4ePHIol4j9+6PskgR/6yaOFqjrUnxs7dfhHj72gVyZfOD5ZmTr1wivHFIl56IcP
      D2zd3pg8+hd//32Bsp58+rlUzxBrFP/6q9/GjvX888+WKsX9B6dk2m62Ck89+TTipOefeHyq
      2Brs6/72V75c9Kj9jz4xW2/hVuGJZ15I5oY4r/2t73zXsNxnn/zZdLlNOW02EGbpy1BM7Fh1
      zdmzZ1csrPBSsCsVjyfTLMcFBDaWyvR2ZwmEKJJomeiW7Vu6UoloPBGPRiKRSCSWiIaDLMuy
      LIsQOn38UH6+NDMzI0cS3OUOem1x3gdyvDA9etpsardsH3zm8LH8iRf5RL9uI1EKnBk5TRnx
      eNdAnCFeOrB/ZLTIsQQTygYDaG56sr1zczCSrOSn9QoREaimwxw+dOj2e+5HCHUPbr1tx3D+
      7DGMUCwWTySsF599SiWUoIBvu/stHIVOnBkZyIZPnjnXu/22uMIdPXo8lB0KcA4flNS58Uqx
      dtcbdp87/AwlxF5t1+7at+PYUVYWWdWmHuhV/uh7h7s3OVNHD73u321HCNU1r0tREgPx5194
      6ciRIwzHMYHozMQoQnce2P/8y/tH+Xv33vfuD/ztH/wOoXSTrnrkwP59b3rPpmQylkiMjI5n
      I8JEvhqKGfHe7a25s0eOj751eNO2TcM8alVKs697/Rsee/yJw4eO3nI7hxBKJlOxRLx3eAft
      aS+/eGSmSezTNMqYsZgQ7zYMStGmx4e7w6u5+4cPHW5r3szkcbVcyet8LBYMGNXRBrrzlu7Z
      ks4F2Ggk1a5MGc322bMnkd5kQt3ZdOjo888Fc5sisqVq0be/9U6E0KHDh+9/6y+Nnjwu89d7
      UCP80uaZiVFWiVF220S8QNmlprmpvwchPD0xSosREtsMQUpBaWx0vGdwc2FqNBiJeiRr6w29
      pQViyQDj5StqWKQFJVhv6el4qFAoJ5OJcrEkioyN2NLsbCIVnc5Xc6kQKYQkjnZMbXQy39uV
      UB0yokgIuyPnzqWyXapukZ5HIUt1aJbCFPJskknHYzOTo4bHyiKbTMRGzo1LCv/1r/x/XGb7
      Jz/83kKhwBAkKzC2iyqVCqEWnj/XePuD94ZlsVrM11qaIEixVEqvF/NVNRuTi5VGPN2liOz4
      yNlYMpMvVoYGerGll9t2TOHOnhvN9vQZbZ1CLia9gBxqqKbdKiNOyaZihtqYr7UEhidITxG5
      0Yn88NbNNIGmx0ekSFqvF4RwKqKIq7n7hw4eElhUrLWSQf7A2eK2rX1eNX+yYG9KsjNlPZLN
      xATedIw9u/Yc2P+cZ6qmkGYpqzFfppVwPEJpLTaTFMOZ/jMnjuzZvfvk8RNbt29bT2tZAsRG
      bfwG1oLz42X+zKvPHhpd8N3p06ev+/ls4OcM54dM13H2P/PT2cmcWZhWPV5g9Uxu8Llnnv3A
      r/4qZgJb+rM39iw3cNPiImO/7e43Uk4Lw5DGB9/4wIO9majnujfu3Dbwc4ANDrSBNWEjF7aB
      NeE8B1JV9caehw9N02zbNk1TlmWMseu6JEkihBiGQQiBvyQIwrZtSZJarRbHcRhjVVUFQXBd
      NxAItFotiqI8z8MYsyxr2zbDMBhjkiRZlvU8r16vh8Nh13Vt24adu64riitNvDHG7Xab53k4
      jZW31HXdNM1weGEoyHEc0zQTiQT86bquYRhXe5+uAI7j0PR6xYcu7nflO3jdwHEcQRATExO2
      bbMsS5Kk67pwryVJ8p+frus0TdM07XkeSZLwK4yxIAiO41SrVZqmGYahaZqiKISQ4zgkSTIM
      Q1FUuVxmGEYUxWKxCFdtmiZJkjzPw94wxvV63bZtOBbLsoFAoN1ui6J4WQNCCEmShDEmCGLx
      V50vKkVRksgXS7VEIta5Tb1eD4ZCxKWfIM9TwmES2/WWHQpKl2xfq3E8LwgC/GnrrarqcjT2
      PBwORwgCaZq29b8+ednTvjrc+GzcAlAUhTHu6emhKGp+fh4hJElStVpdwNUkSarVahRFWZYV
      CARIkgS3hDGWZdnzPNM0EUKtVgshFAgEGIap1+uNRoNhGI7jXNftNAWSJAuFAsMwBEEIgmAY
      BsdxFx+JbRcKhVQqBba4GixpPYs/L40f//azo7cPJ8uVhkB7Y3PN7u6YKMluqxlOp6fzBdZo
      JLfsq82dQ6ZFBHjSMctFLdTVpeVPW5hXwpGaQeZC5vGj09nhbffcuWv/088U5qa3v+GXp156
      oty2P/C+X17tfb9a3HQGhBAiCAIeVTKZdByn2WwqikJRFEEQYBbgb0RRBOtBFx4MSZK1Ws2y
      rGQy6bouTdMzMzOhUAghpOs6DFjBYJAgiFarRZKkbxCCIPA8Dz7MNE1JuuQVB79Vq9VisRi6
      ppipaLu75YbLxxOcUZvNDQwpAuIYoqWS84USw9DxSAbbdjIamquqETGAnIbYFy03rWA4RhB0
      IjdYPnqCFcKbt8tnxyY5ahdBoGgiEw/Jdndv1LYnR08iLpaIBq7taXfi/CxMVdWbZAhbjEaj
      oes6z/MIoVqtJsuybduu64KHgGwiQghjbNu2bdsEQUQiEXAwhUIBrktVVVmWW60WGIdhGIqi
      NBoN382sDMdxMMaRSGSN16Jp2gLrvCYw1abqkJHg0oaiadqH/+nINT8o4Gb0QAsQDAYVRSmX
      y47jJJPJarXKMAwkog3DaDabQI1pmg6Hw6Zpdg5PsixrmoYQEgSB47hqtbr64wIfgn87jgPj
      43Jj040FJylLSlJ8fOs3963ToW9GA/KnWv4nBEHE43GEUKFQkGUZnqtlWYIgxGKxzi0XeBRR
      FMEDeZ6n63oikcjn85IkgaOiaRqoMUKoWCymUqnO35qmSVEUeDjHcRKJxDW3nlKhEE0kyEW7
      rVQq0Wj0ko8wHhsdyfUP0qRbq2nhsHL+c8eoaV5YERHC09OzYUWwXIIVlcClafnez//k2p65
      j5vFgDDGhmEYhuG6ruM4CKFYLLZ48slxnGVZFEXZth0IBFY/HDQaDYwxzMsCgQBFUQzDgMcy
      DMNxHEVRdF3HF0BRFNB5VVUZhpEk6drPhDF+8sffGrz1dWPnRjg5IglkY3qUklNIFOzKXCQS
      HJuuZLrSPEMjmrvvtbv2P//ibKkWDjNHnz0c6+9HGPMCKbpaOzAY9MptXSvVnOEE9egLh0K9
      u7d1yY1q6Z7738LR6+sybyIDqtVqgUCApmkI7VQqFYQQQRAEQSiKwnEcQigUClmW5ThOOBy+
      In8ARkOSZDabhTkasCie54FdrXBi6zRsWa1idPB2rTyTzaRLGooGOcpIM0KYUHgTGQSBunuH
      FJluV4pt1cCY7O5OaoYdQvy27ZtnGxrDshRJkJQQlkXUIllBHlAkiXF279mp2kytpUdiyfzE
      qV8gEl0qlRY8S9u24alrmubz4iuC4ziapoGbicfjPM9rmtZsNmFXjuNQFOUPc4BO6nPNcRUk
      ulaat0g+Gb166aqmaR/956NX/fOVcRMZULvdtixrOSvRNC0ejy/3aDHGzWbTcRxBEPwL0XW9
      Wq1CVBr+m0ql8vm8KIqdER1N05LJJEKo1WppmkYQhOM40WiUZdlGowH03HEcURRJkqRpei3m
      tU6zsMselOVW8rJrwc0yhKEL/ma5bwVBgBTE4gEFY6xpmuu6LMs2m02O44C+QNgQaDVYGJCb
      TgvwPA8Gx2azads2GB84rWq1CqHncrkci8VUVYXUiizL1+plK87Px5JJ0rVquheWBeQYVc3y
      LC8WCyGEjHa97dCkZ4UjEQLjsZFzuYEhmnSrVS0SuUiiq5oXOU+iZ8KyaLqIk4ILSPTgf374
      mpzwYtwsBoQxtixruQeDMW61Wp7nQZBwgQ0Vi0Xg4NFoFDgTQoggCJZlNU3jOA7yITRNA0Hu
      /LmmaalUyvM83zcAPXIcR5Ik2BI8kB9wajabgiBcA2KE8VM/+VbPjtdq7baD2Ga7/Z57tz38
      swNerWHR4o5N0amx6XmLSwaoZCZ392u2v/zi/tlSLRxhjz17KNLXjxASeFJwVVUeCrqltq6V
      au5wknr0hYOhnt1bu+RGtXTvA29dbxJ9s2TjIRu15FeO41QqFYZhQqEQSZLtdrvZbHqep6qq
      n1qSJCkQCOi6ThAESZKe583Pz4Pvgd22Wi3XdVutVmdKBGMMQe1Go+HbLhgZpDXgEwg5+r8S
      BKFWq639kq1WMb5pn16dS6ZSzVqV5TlEc9u3b0vFwn1Dg7puCoI43N+T7u5VAjzGZFdXwrAc
      hKhtt2zxXI+iKJqiaF4KyyJFUawUHOzrCgTje/buTga5umpEEqn8xKmJ6eLaT3UF3CwcqF6v
      I4QWD2GmabZarUgkAnagaZrneaIoGobBsqxpmoIgWJYF7LvVakWjUY7jwFxM0/Q8z+ccjUYj
      GAyCp4E0uOd50WiUpulyuQwDmeu64OcgVumfRrVahUMYhgFpV4hLXSluFAdaPxJ9swxhwGAW
      fAizp3A47DsnkGRA+r1Wq4VCIcMwfKcCqXjIg5bL5QWPSpZliCHB4SBHBvl894LwkqKozvih
      f24cx0FQOxgMogtmLcvyutyLdcBXP3L7Ou35pjAgx3HcRdpZUHGwLNvplvx5vmVZwWDQ8zye
      52EAgsgypEJpmpZludlsQqoVAFYI/yUIAgYvdGEy729GEISqqrABfGLbNkQ4TdMMBoMsy4qi
      CMm1NV64Z+vFhpmKhZBnlSsNKRgR2Et8MMbe2LlzqVy/xDOQh1mcj/NsY7bU5ChMklQ4FqUu
      jLz1ej0YDMFf/8ZJdKvVWhznBd/TbDaX/AnwG8uyQOVjWRY8b8/zYANJkjiO6/RDPj1qtVos
      y/oUx3GcTkZsGEYwGFygHhFFkeM4X1CGMXYcp1AorDG/cfrQK0fyen8qhM3S8aMTVKIvLuJQ
      KDg7PhbuHmBIYlOcsQKD06ePThRrLkl71YlCmx0cynqGOj6Zf8f7Pnj24DOtyrzQt8+YePHQ
      SPO19+xhtVLJVcpj5wZ27r779r1XfW6rxE1hQDA6aJrWycPAnYCYcOWHBJMs+DeQGHAzNE1H
      o9FarcbzPKTTGYbRdZ3jON/OEEK2bXeaL03Ttm135tR8X+Uza4xxIBCo1WqtVsuPFFwFVI/K
      KJztOghxmzZvLtlMOhEgzDpBsyQbiAbIaDY1eeKcyFIUzYTDYZdoi+mU1pi1LbOrpz/AMzRN
      h+PpaDKmUzswPclg18FUJp0hm0XLQTdMzoEx1g2LY+nVS6jWDsuy6vW6IAjwfhMEEQqF5ufn
      4elC5mHBTM2yLEjF+7N313UpiuocXCqVCsuy9XodSA+YqWmafgAaCI0/YCGEqtWqIAgrm4Xj
      OJZlaZomyzIEHlcTKL8mJLpSzBOcvJx4Y8mD/h/fPLbGgy6HpQ3IsqxPfuPQJ+/p2dK1qvty
      rVAqlRiGAbEOxFocx5mbm6Npekk9MhhQ5ycQsOl8SKBwlWWZ5/lCocBxHFgkJOcRQhjjarUK
      0mkwx2azedkcGYi1QWoNUShf7LwCbtQsjGJWlntcPS4ZwiC4QpKkqqpffMsmS20Wi0VJkjzP
      g6ey3mqYcDjcbrc7Q4WNRiMUCq3+uGBznaMeTdPwaGHYWky2QAtLkqSu6xRFQaz5skcE3wyH
      g3x+q9UKBAJXdItGz55k5VhEpNoOpbcaPT3d586e6x/aRJOX7AS75tnRmU1D/a7ZVl02KJ23
      BrVRIcWIwBDYNafzNZF2Kqqzqb9n8TkM/94jqz+rK8LFu4kxLhQKoFQ/H/7nwujChAVk6vC6
      ++PF2qHreudIQdM0DDQ+AoFAvV4HcYXneaCNX8E3UBRlGMb8/DxYYbFY9HnuAtuiKMqfioui
      6HkenMkKo/aSbIwkSUmSms2mYRhQHAJT/dXg2LHjiA3ckpUeP3iu5Yif+cjbXnnl1ZGJaY7j
      Jao9O1MLhCPBrk07M/Qrh05UKnkJawdGarneHEO6yFCrhblb3/5r0y8+qTUKXnwH05qqte3R
      M8cUkWm2sRjP3nv7Lev9zp83IM/zyuUyJIb8Q/r33fM8WZYhMYkQwhgDP13LyQHRKZVK0Wh0
      Ba/OcVwkEoHcAgxYFEW1223Qxi9ZFcnzvOu6pVIJwo+QxDh/tR3uBxJngiDAnL9YLLIsC7O5
      JW0IlI2Lw60kSQLZ53keMm6rLN5ACEUiEUoIiUEunuzZkY5iRHWl4mPzlcH+Ptd0WEHIZDNK
      KknQWiIsYIKhWHnbcFC1CYalkWuGYimBRgzLhGNpKZ2wJfd127cfPHRIrc+zNEkiPD56irw+
      JLper/vmspqfQfUTbAxFDp7nBYPBVRJJVVUdx4EZlud5yWRS1/VGo7FAEwhwHKdcLiOEQA4G
      0lKGYeDJLeeNoJILAtPwied5pVKp0wKq1WooFAKHgTEul8vtdhsESX78CWT28F7V6/XOao3O
      YyGEXNeFLKwoiosTdv61X5YDNRoNRVGuoee4HiR6uXDLagATH4SQpmmBQACeELBLfxuYKjuO
      AykLsD/XdePxONQQ1mo1EMNDsQ7P8/6Ntm17fn7eDwkSBGEYBrzufv3Gxeshzl+RaZqQPQ2H
      w5BNkyQJPoQTg5QFeCl/cg5FibVaDeICEPjWNA2cbjAYhPLCxUFzAFQzQtHjkqmhf3sk+hoY
      UCdA80AQhGVZ3d3d8Dh1Xa/ValAkyrIsvOUQrIMnB6MDgOd5cC0kSYJ4A2PcaUDLoZOggDbI
      sqx0Oh0IBEqlEgzEMEsQRREcDKRKILHlmzvGGAoOPc+DakaEUL1eZ1lWVVVFUWq12nLKJNd1
      VVXVdb27u7szLuBjlQaUn5lo6Hh4sNc22jYhSDytNioth9Sbjd6+XgKhSqUSiUZ9HwUa6lJ+
      ptgwUrFwNHaJnvrnqbCQpmnQUUAhHyhQ6/V6MBhUVZVlWV3XocgLdQyXUJUMtuIXMruuWywW
      aZqORCLRaBTUPFCtvJijuK4L8zX4OcuyPM9DfaCff0UIQXIDdIngLGmahkARQgiKkcHUEEIk
      SYqi2Gq1FEVJp9Mw8gLXhp8vvnwIi7MsW6lUMpnMVd/G48eP1+pGqzZdmC24rCIFI32i9vjB
      s42mEZGF3OCmVqPCkryA6hoRZOSwOne8f8f9jfyZdN/woZcet5DCyApDkVZ9Mtpz+5aBJYjB
      tcJ6yTkgV1AqlSC0A0XH8IyBvnRuDGksiqI6SS6ITWmaLhaLjUYDshaRSMSyrM7f+rXooijW
      arV2u22aJtDhUCiUz+dnZmbgBBBCgUDAdd3O6BHLsmDlwJlgh6BHgw0YhoH0arvdDgQCoKwl
      SbJT4NF5MhDmXlhTcYWIRqOpVELVHZ5jYvE4gT0xGE2k+u66fVuudyCiSNFoNNudwoiR5CCN
      8PCOnSz2otGoa9vx3OZyrdIVkTiOT/f2c2h9u69c4yHMNE3wQP4nfg4B/Mcq9aBAJhiG6cw5
      gK2gCx7LcRzIWkBMDwZHjuMCgYBlWVBDCDlXy7LA98DUj2GYZrPpNz+A1BjHcRBa1DSt1Wp1
      yoMsy4rFYmCXQKVd1wVhNWj1O0+73W5TFAV2tpgIXwcO5NlmrW1G/bofhDRN++S3T6zT4dY9
      FwZ2gK48erTkFN1xHOjawTCMLMsURcHQZhgGTKmq1apyAcCKILsOJWDNZrO3t9dxnM4BCCwe
      5Kq6rjebTf8ZA+vv6elBCFmWBXlWmAl6ngcStgUJf0VRPM+Dkuq1V7JeBUiGi4YX0q//9Su7
      1+lwN0UydTl0uh+EULvdjsfj8GaD0RSLRZ+vRKNR+C9M9IDngs4aAs3AvYAOdzJcsAAgN6qq
      +k05EEI0TUuS5NMymqaBJoOizTAMKLJewMmgAr9Sqei6nk6nl3e69okjp2LZXDIGsVPcrFYw
      FwhKfKvVxrZmIKZVrUTjaWjH0arXhWCQXuoldIxWqe2mY8tWbmz7/Z+ueKevHtfegBa4mQV9
      MFa/ExjFOvcGIjJfEUZRFHwCUU3Yxu/5UiwWYX4OFgbCe8hbLTk/8qd+C8I8ftTAFz3Cz+FA
      wJAWz9gZhkkkEr7kY5notn7i+Igwca5SMVO5CI3N2nybVUKY42xN25rhnz82ZWCUC4dtKULX
      x/hQvxhlSM9pTM4ziWxb1XmsRRReytziFE+P1r0wqjNiZKJiDqUEy9B1Qnn9fXdy1M9VYaHP
      Xa7sJGgaqlF9EATBMAxEj/w32G/M3olYLNZoNCDW538I6YUFOwQbsixrORYC3T8WfAtTNj9c
      CbU+wPehWceS9fYwdDIM0263K5VKKBSCbMyC647Gwgyl6yZdqzf7+3pEsuEKIdWwMpGgHKRT
      OT4TRppGtBwvls1UVSRwPIm98ED/6dlSMByKKfHx08cfeG36TG0qpbiSIGqmJ4uY53mGZjyT
      GJ+Y4CliNVneq8a1J9EwlfU/8ZtwAc9d8lcURS1QdcFUCCFkWRZUZq3AvmFCtJoMlGVZfluP
      JQE+D5JucLYwCHbu3O/WAFtCvhmkasudXqvVymaziqIsR6KbzaasKFfhK8rlcjQaW5lbapr2
      2/9y8sr3vSpcNCB43dcYQV88C+v8asmxoxN+cBlSB6ZpgmfyeyEsd1C/E9nKgFzskrboh7DR
      hUJ9X3y4Qhl1pVIB1wJhbjjbBc0hQK7UbrcTicQK/m/9oGmaQ6yXJuf8I7EsC8Ksa1eQLXev
      l3tBfYDr8p1NZ84LIQQtDZccHJfLqi7GCg0S/HxWtVqVJInn+UqlwnFcNrtsj+xGowHmDr+F
      ACPoOlzXDYfD8DlJkiCpXnvF9NmTx4RQsjuTKJfL2LMYLgj8Oj89gTk5nYg2ymUd41Q8vuAZ
      7PjSo2s89HI4f0MhdryuqX+CIKDMb0kbhScBUT7wQAzDQPQIhgzoUAYFN4vP86rP3HVdiE7B
      06UoCga4YrEoy/IK83AISvnuBEwEIQQtPkKhUKPRIEkSpniQHVv77T1+4gRJnXys0hTj3SnJ
      qFdNiwm9/d33nDo3d+uu3sce+dfibCM4kDAmx8lQlmYoQs3nbrlvU+4aN1brxMU3cr2FI+An
      lqtfhq/gNICxwjjSGRQGFgXaiWvV/4AgCNd1ofEZSKehygz472Je5Q9PBEHAZB564/kcjud5
      XddlWaZpGgQLMPuLRCKrdJMrIB6LMTwfkONKNCaSqus2lGgXRlxIJvOlhsBxqe5sMBYyPa+p
      28VGc0t3dzy6WnHS1WHdSXQnwERWnqOB71FVFZJZ6NKIIjQ2hPQWQmiV1OeygFINmPexLAtR
      x3A4vFhhCOJXP6QOddOd/AkuE0JBxWKR53nTNGOxmF8YeX04kKm1a6qZjEWhS+v1INFX1NZk
      vmnM1IxbexZGrlY2ID+tscKe/Tgh1IVxHAfE3N/AlyGj1VnkAiwOGXSiUzUGgyk05fSvDtoq
      +ikRdCHUzjAMdPaALUFWxvN8qVQSBMEvY71Rco7rQaJhnF7lz8bK+oGp+t5ccPHAt4KjhmDd
      ynO9zkAwkJ4FG4N5wX9B8eOnV4FIrZwzWcF6oDuMH3dgWRY0k34cBdL7/vZQQwKfgNfxrx1K
      Ndrtdnd39+KaSR96s3J2Yq5/aLMsnH/A2LVOnh7bsnV4cd87gK03Z8qaY7QGB4cWbNKo1wPB
      oGe02i6H9FpFdQZ6snAr1p1EQ/R29T/b1xfa17e01n2FhwfOSVXVtTNKn4vAPuEhgd/yL2Rx
      NAGCe1AI658AZHnBWOPxuC9OgliUZVm+RBCUrwghqH2GrC14o8UHomkavl1h6leZPjczUzl6
      ajweClCkJQSir9nec+TYqbnZUdO0KSGmCNjV6k0TtVU3k1HyDfzmXanvPvScobb6YwoVyfCk
      o0i8abmlqhqLRyJBujw3l97xQH3q5G233baWO7xKnL82CMmv/mdX/fhpmoa64MsKxK4IUJza
      GSvq9GQ+gANPClEAACAASURBVKqDrYB9QMK/VqtxHJdIJMrlsp+XACGiKIqgTEokEpD8SqVS
      /qCJMc7n8z5V6owAgTtsNpsLygQ6ISiRUBiLokvSTDicpBDCJJOMybysZCWmUNYEUcA8q83m
      w6FI/0CPenqKFpRNuawUizFai1RiAZagsVmpteNJuTsTrdXLSigSCrBiIjo6MRMS8HUqLKzX
      650tcK4aK3MgHzDorOZwvvx05c0W10v4LTtW+K1pmlDKk0ql4Ofz8/PgXWzbhnawEGKVZRl6
      40PD8lwu5/PFdrtdLpchGQclZgzDKIqCENJ1nSTJzvbkN4oDfeZ7p9Zp59d1FuYDBpHLBqYB
      MHVfkmyt4Ahd1wUJ84Ip0mJYltWp/3Jdd35+XlEUURRhwgVTLYRQq9WCXjMgDPK9DlR0gPMD
      KRJFUYqiQCCg09feKAMy8PovtnI9AZKaVW4MY9NiO/A7+izJUj3P8wNLYASLx2hgwQuCPRRF
      gRoVBLXQ3Ry+kmXZj3pXKhXDMJLJJLQLnp2dhW7ALMuCfteyrMWFs5cCT4ye48UAI4aiwYv5
      /Pn5+WQqBW9GqViMxeNGu0EIQZ4msOeOnD0dy/aHZQHY2OJEqWepU8UWj2xE0tF0iiEIhNCe
      P3hs+dNYE9ZqQJrlshRBU1cT1ruiwAEYgd9FGh7kAnnrAoDFwBAGVthpgpBjX7K6jbhQgghu
      DCEEdRqBQABS8VBrRhBEuVyORCIcx6XTaSjr8TwPlgKCGaKu68vZkNOcm6x626ny9x/+Wf/Q
      oF6ZKdV1hg8xnBHhuLGZYiSVoQkyGXBn5ltMOBPgiJ05Reey1clTL0wVLZJl2zOzNdw7kMN6
      fXK2/O5f+dDpV5+pF6aU4de5cwdfOTj58d/99HrXpa/JgDDGf/fC1M6scu/QFUuAOY6DLmOr
      b+ANmUh4tJe1nsWn2vknRA5XyJIC2ec4DvwckG4o8YYTxhfa4FUqlVgsBnwLYtPAk4Ctr6AR
      oANxwZ0ut7ndO7bMV9VQKKREUpgQMaXyiOjngoFQSOHZWnkmKAeEeCzKE+FMdvToaUrgBEFK
      hMOUTvAxwWjPm6bTPzAU4BlJkoRcfyQdM7itr2WU2cnJ6lJe6hriijnQglSz7XoUQZDkxVDb
      ajiQD8MwQJl12YNCjQTEWiBqtQKz8bNmKxwXGgj5RWErA1SOiqIUCoXF88darZbNZheIo1VV
      LZVK2Wy2k+qtBwdq1asezQcDy3YovFlINLTo+vRDo+/ZlbpvMETT9Il8a7ZuPrjl4moVV2pA
      CCFIJ6EVSTG895AX03V9gXhoSSyXugf4rTlWCV8nVC6XF8uJwD9B0X6nOrHZbC7o0/CLS6Ix
      xo1mk2T4f39bZjgRgFQzg714YK2DLDSiB2Lh3/0FfAVa76ILyfMVrAdCQSszdNM0YZq9eoD1
      TExMLPn4fekZMB7iQr2sKIorn62hNkYn8+FIOJ1M+ls1ykUuHOcvSFGLxWI8Hhs9e1oMyFI4
      hS3Vb1y3AI1Gw8NeKBQmEKoW8xXVHuztJm44iYZ7VyqV5g36O0emfv8tQw3dwQg5jhOkvIzC
      Qf9vf2PofLCk/HTJGbW/JbzHy0W3QZaFLhfDBOYLu11ujIPOipe98MV77u3tLZVKy20ALcyh
      qhWCh/l8fuV+ri+/cuDW225/Yf+rrzz9rx4d5qJxffaUgwKJvpxanG1orhRO2Eb7wdsG6yhE
      V8Yf+dkLmb4+uzIrKQGzUW46nE2QQ5nofLFEsbKuNWLJuNNs77rr9ceOn7r99vVqrNmJJZrl
      oEWU03VdSZKGZPK/vHlopKR988Dcb90R5XkeVoGcm5uDjkwYY2hDqWka9NT1UwR+X5jFO+9E
      Z+ZrwRwNSrF4nvcLIWBSBi3rTNOMx+NArpf8eSeuQlZRLpehXH+5VBpcO8/zsVjMfx+AqK3g
      hIb6e06cOhuOxoI8SvcMjE+Xo7k+ilPajh0OBdPd0YbmULIoJ3rcg8dVjt25bVBHghwc8Ey1
      aTRqHpfNJAXOi8Zijo2TiT5EkR72PA9nk7Fz49Ph6xaJXpIDAb2FFvHAH+HFDYVCUGsB4069
      Xo9EIsSFDnPtdhuK+qDTYK1WA53hlb70C0hMu92GVk7wnGAOBd1YoGIrHA53TnlW4ECw8Mrq
      z8R13Xw+D9LEfD6/QnPWzj3DCnkIIY7jfA99DTmQYxkOonn28mOIpmmf/cHpa3LQxbhoQDA9
      htAZxDDAJsB/wFIVgiBAfecCwe/iNAJMW6AcGPpgXFGjMbSUBUBmwM/7wkn67X+gJ7DvhFYw
      IE3TQKCzyvPxr3G5bugAjHG9Xoc1gTzPy+fzHMfBUoddXV3XWQ/UCU3TVHe9atjPG1CtVgPd
      AnS4QdD76EJTMNu2VVXt6elZZdwPLKxWq+ELDZcaFmaxHQ5eQdubFSzAl21Aw4YlN4BK5CV/
      DrUZxIVVEFcPEIgtdwmgH4IhFSr5eZ5vNpsggoNGaUsYEPbOnTktBmSH5HPpGIG8RlMLBs87
      uVa9fG5sanjrDomnEUKFQiGRTBKXFhkWCoVEMnHu5LFM/9YATxcKBT90jlyjUDNkkV337hws
      yw4MDIBmlGGYUqkEdSowakBhjWEYq1wOAW5xKBSCumPTNP/q+eL79yR5Vr8mCypA9dkKR4dH
      uNwGoP8C8fIqDRqk2ZFIBNL1S/4K7NXv3UFc6AwMZgRLTi3+VXP2dIMIsbXxJ87pvYpjG625
      kh6NxyxEBSXhDffd02oeP/DsI5qDHFJ0jJYSElrTpTYpp3tC6ZDy3HNHujf3vDEZHzlzamym
      nOnqOnv4KYqOMwGB43mOUDHfe9vOvtVc49Xh4ggK3kUQBJgDw8sEow/oMq+UxICABupj/q97
      M7quO861kV0v+fw6K7NgOVVoCLTcz6EP9SovyjTNZrOZTqcTicSCNmedgGjQApLkuq6iKNVq
      dUmHF0j0uIeOt1m2KymkIgJyNUFq2IhOhiMyRyGEEsmkZytJlsvPV+X0kMgYaTk2UWiFFNnS
      9XgiHoslEPaSiWTT4zBC23bfWp1rWgwblHmSkDjpumii/Ta/UCkHS7LD7AakNpqm5XK5q5AB
      tVotaLkCci3DMFapBLpcJvKSbRaEf6DKApIJ/p8LJlAYY79OORQKrRwNr1QqnufBAr/+yiyr
      AYTaSZKsVqu9vb2dhRzXDetKoi+5a7Ztw+sFw7ksywzDTE9Py7IM7cau4gDQ4RVjLMsyhB9X
      OXCs8nAQW/KLOgCdKsEFxtQJP+UJPRjj8fhyBJkgiGKxCAtlXJGMH+YlEHm6ouTdtcV/fuuW
      ddrzRQMyDKNer8uyDP2OZVn2PK9QKITD4bU0ZGVZNp1Oj4+PQw5LURRVVaEL4mKxsx8tRKsQ
      kQH8mWPnh1DLBxwcBrIlU+6daVFYmXC5tS/AAur1OiRAIH6xuJx5caQUTgyi7f6C5UuilJ8u
      VLVwTMa6GU51SzyNsHfi6NGBbTt42i0UmsnkhYy1rRWabjIqI4RHR8ejCq9aWArFQ9J5h623
      6iD/8He+74+fWPEuXj0uCkChsw6IHCDSPz8/n8lk1t6pnmXZeDxeKpXC4bBhGECzFr/K8CAh
      WYEucLKVgS/tJuYDdrKkq1vwIbguGJJ4ngdp2IIKXfBn4JJhTuqPd4v3tuBwUB0mCEI0Gq1U
      KissVT56+jSX7hs5faw6NYODaVYKvvW+vefOnMlXm6m0fPSZA3wyy7IUy5GSq9rRbROnD7YN
      raFSwwn6kedekbK3wFLfeqsqR9IqEmXORqYuRQd239J/2Tt51Th/I2BaOzs7m8vlfA1vIpG4
      VvV70IIe1tvmeR66KSweC1YomVgOC0qGO73CkgbUWTuBLmVakPDHGMOKCAghUM4TBAETY9d1
      K5WKn0xd0rEB/EYA0JpTEASKosLh8JKN8QCxZFJz7XA8IyLKC8Qd10MeiidjhBBAiN5z256i
      amJEBgSCp4JkSEbtIKuEM4yo0M49996tWrSLvVz/kKtV2zpWgskw7xw78BITXMcpGOok0aZp
      zs3N9fX1rdPSha1WC6gG5NIvu1DSyul0wGKiDYMLulBns1wZNbrQu27JQmnf8mBXoVDI8zyQ
      jS8YeaEsZIEkUtd1kDrhC0XTvtzAdd3r2basVimLSti1zS/88Mw6HeIiB1IUhef5q1656LKA
      Ihgo61m9nvWKQBBE59qDnZ5mATuBkWu5CjX/Q99dwfaLXy0/d4surDoFuT+/kLnTS62xkukq
      EI7GEEKajT735s3rdIhLuqKun/UAdF2Hgh7Quq88UV85DbncTzr/BAGhr4Dza8eg6R04D7SM
      RgAA2lZ0afrCbxi6wPHAniHoCjv0WfxytYWzk6O6R9COW21r0YhC81K92lA4r6ribduH6QuF
      IolIsGUTQel8yKo0OxvMZFiCQAjV6zWMEMJEOBxq1+psKMheuGOzk2ORdK/Akug6kOjrAxhT
      QAfYbDahLGs5E4GZy3Jh38sCzAKeKGh0YIlnMNzOJVpXTs6bpgmn0TkkQYPYBVv6aThYsQqW
      7FiwmV/2Cjh9+szgtqFXnnym767X//AbX6NDSZcVekWkbH7tq08/XKjq8yqRCXgCg0uGoIgc
      SdqiHOXUeun0MQmhE8dGUt2ZaDhUmR1h5Hix0Ip1BQUhti0jHxmdqTXV9793fQkQup4GRBCE
      oijNZhNikvl8Hor6lktqwvhy1SWIvngIvAi0lYEnCia1YOPlzMg0zWq1Cvwa9CRLVmB2knfH
      cTRNA/cDpuYfboGPz/b057JdxcGhdnF+7133tl0uSLSCiUyip3/k8Ew8HmAUor8r7rSKvM1j
      goyGAyRCTFDkaYZzDMd0w6ksSdEhmauWavHtWxCDY5GELBGyouZ6++fGT92YFQvXD7Vardls
      5nI50zTHx8djsRj4oeW2B3U69JNb/O3KXc/gW6hlFkXRcRxoIrZ6GT/sBCbwnufBPHw1v4Il
      NWiahuAIHBFM2Zd2XDdomvZ7Pz67Tju/3nVhoVCo3W67rgvaK8uyVn4kMMZBKOVKxzKf/yKE
      dF2/uoAWy7KwntzU1NQKRcoAf34nSZKmaTCR9CNb6HLD5frhdx7YtE57vt4GBDEV4KSxWGxq
      auqyyQ1f17a4W8/KJgXfwlP0G+b5oSZ/2Fph/IJvQQulKIrfMd03zQX2gToahi4ZMFwQ6GpW
      i5Nz5c1btjAXFNCV+Xk5mSxOjZF8KJNcWCxVr1UxosLh8/lRtVY0PNIlhUT44rHq9TrGOBwO
      z8/nk8k03KG7/uTnZLGV1cAnBLA2RalUkiQJVIsrGIQoiovFNCu/0D4NAjbtuwd8ocTishJb
      HyCw9FMf8CFM4hZEB1aOhS64wFcPHetJRx5/4imadpFuNGpNwyXf8cH35WemEFv64b881DOc
      URs1FvFlC8cETwqw1bJdqTR6hjMsHRiO0wdG5qsqToQCVnuWYhTNJeVQSKvOm/UalR56/9vS
      l720NeJGdqqHlbOhh3K1WoUI23I2BFRpNdHFxYBo9YIi6AUpiMW+5LJYwVwMw4B5PoQqYOeL
      pwuDvd2z8/ORcJiiScTXg+FYo2UyCAXDsVqtku3OJDO9bCpVnJxhY5GuqMLQmCfmeVFKZnol
      Ekkys3t3enq26BGEkpRmxydYKZtJJbFMzguilEjcsGW/rw/AGczOzkLF4OzsbCQSWWHdWljA
      a8Hq0itEkpak2JZlAaFecCaCIJimuYIBrXyszpA08HRBEGCpDXBUoVAI1q5bPzmHbRmI4phF
      renXlUTfSAMCWJY1Pz8PsuvZ2VmbC7mITIvYf5YQA4TIsm3bkEqDSCBo+33hGMRpfJW0bds1
      hxkt67d2STRyIfsGU3q/YquTfvlpkMUgLlfqCsAYQ1sFyHjgC+XPwMASicSN0gNVr6D305Xh
      xi+2wrJsLpdrNpuFQiEcif6v5+aOzLa++ZFLVpfx+wmNlFTcxt86MPW7bx5CCH3t5dmzRXVv
      t/LOnSmEEEbItD3KczyCkljqXEl99FRpvmEOxMTeqGSaJkmzAkHYlrF/rPLMWP0/vjYNWSo/
      YwVi6iUzLQvyyr6kH11IYiCEIDoaDAb99VZVVfWbDy2G0a6dHZsZGN4icTRCKJ/Pp9OXsJZ8
      Pu+6bjab7diDU54vsUpUEdl8Pp+IKodPjO/etQ2brYpO+WxarRVdPqoI5wPo/6ZI9JKApZN+
      dKr+s7OVtuE2dVvmz8dOjs01D8+0HhwOJ1n2Tx8f+5W9mV+9PYsx1m1Pt903bY31RUWEEEmS
      Zwutv31++u23xJ8dqTUNR+bpW3PBj9/V875/OPR7bxo8NNN87FT5/XvTb70luTvHDSblV2ca
      bbOxr4v310OFgCH4m87TA1vpTGh0riAOfBzqa6HXG0EQ0GUhm83CZhBPWnDVL718cKi/+9GH
      fhDvyYxNlgKoxrPR6abeF6Mb5Xr/a95YHT80W24PZGOuZx88Oj441CWIdH1smsoMttvtXCIU
      3jU8Nj7RapbjInr+yEQs0y2yBO3ozdLcjjd90Deg9QP1xS9+Ea0u9b2ugFvcH5f2T9Qnqvpb
      tsU/873TFEVEJObvXpj5zqH87i4lFaBMF+m2e+dA5JXJxh89MvL7bxnKRUSZp2G8CInMUEIa
      iAj3DEX7osI7dyQHYiJBoO1puT8m/vfHxrIhniDQ535wuivE/+njY6eK2jt3Zjb1pGVZPjFb
      dxEZCfBQWevnJXz4szC/rqjTr4BSxfXwI2ebW7MhjmVh8VdYCMG27bGxMVjprJNISRw5PVeg
      GDmZDCKSGezvc/Q2F4z29XbFQkFeiQVlMZ2ICwLLS0GRY5qqlsvloqGo4+FgOJRNxkOKVK21
      wpEQwzDpdIblBDkQkDhSDsWS2e7S9Jm6iiWR/fLTE+v04G4WD4QQoljut792+Mhs687+MM9Q
      o2WtrtmVtv2Ju3Mtw9mWUTzPlTnqyGzLcrx80/j8gwP+I4TnrVnuT44XX9sXbhj22aIqcfQn
      vnn8r96//eXJxhd+eKYvKr461djVJaeDXDzA3DUQ+e7h+RP5Ztt0h1OBr708LTDUO3em9/TG
      VFWdrhnxACuwF99gP14FYZ7O2CCQM5IkOZ4/Uyh+60D+A7dlIItSKpXS6TTGeHBwsFwuUxTV
      GTiNZ3rjmV749/AmhBAaHt526V252AFix46dhmFwPL9gOLzvvuWLk+StCCFN0953a/eVPYxV
      4yYyIJIgeyJCsWX94ds3aZbrePjrr87tn6jfOxR5eaLe1J1oTJxrlnIR4fEz5R8eKz64JY4Q
      8jCua3ZYZEzH+/R3T/3Zv9vCINfBwi1piWeokMhILHX/cHQgJsQC7G/88zHLwZ+8p+d7Rwqf
      el1vy3S+fSDvYvy27YlP3NlVaDvfPzQ3HBcIgvzdH5356J3dr9+S8nPp0NAIXdraEWMM6TyO
      49rttiRJv7w7dXjmfJmvIAjtdhtUjvhCg6y13KKrKOkHfPx1A2s57gq4iQyIokjTwaW29TfP
      TYkM9a2P7Jqs6J976MyOrPyTj++NSBxC6M3DIZHnvvzM1C/vTv/GPx/72od2HppufOGHZ+8f
      jqq2+yfvHA5wtGE4LEWyFO1h4rZckCbR6UL7X0+U3jAcfd/e9LcP5m/rCdY0+/MPnYkH2Jbp
      fOUDtzw3WjtT0g/NNF+dapwp6YMJ5Ytv3dQb4SENBxVO0NQRY6xpWmdEER5qvV6HfwwlpBhj
      eRhRBIIlMjHGncv2dlwxHj1zipIivV0XV1X242EIobm5uYVLP7v6mdNj2aEt48cOKulcTyaB
      ENKbZZ1UIgEWIa9eb4VCQYSQWiu4fMznQK/7H0+t01O7iQzIdrxCy9Rtz/XwbT3BTJDvDgv/
      /V3Dj5+pSPR5wpGNKpqmqZbbHxU+eU/Otu1cmP+Tdw5XNLumWhJL+AtDwfa/dV+/53npIL89
      LU/VjG0puaraZ4pqXbNnG+a9g5F33pJUeOaRk6Vbc8GDU80Pvia7NaN859XpYstKyixLovfe
      MQDOQ1VVGJUkScIYl1Wbwm5F90RDFwgXuy5ipTOF9rOj1UyQHzs2+cFdYWA8giBArj4ajXbm
      cZ3G7GTFVLTxV55/UavPJ/qG2m3Nasw2TSaaTDx4/wPnzp5l7frzR8Y8mlLnp5s23ZeL5sdn
      H+jeardV7Fb/+u8e6++LRyjn8EQ9nIgHWM8sFfiu7aw+UZhv7X3z+64Dib6JDOiVieqxuZbI
      kh+/O1dRbZokCIK4ayBy10CkoRrchSkPx3Gff0OOoYhuRWBZ9sREpdy2tmfkM4U2Q9MEQXz5
      6YmgwLxnV0pkz4sSt6XlranAP78ydzzfemak+ol7er66fwYhdDzfOl1oP7gldnSuVWxbIyXt
      1+/MlZrG116e6wrxQ/Hk7X1hX7wB0iKgQZrlfPLbxzXTLbQs0/G6w3xvVJiujU9UdITQ3lzw
      Q7elEEKhUKjVaum6HgwGwXt16oFoORVm8w6mtm7f1iyHEC+FwlEmHWxZdDgSCgYEkafrBg4G
      Q7EQX+Dl7YmQQCNFCAYYhNPpgKxs2TIckUnk2Lft7jIIPszbmiw3XcwGItnukMJTEyP/piPR
      C1Bvtp86W/rsD05/9YM7P/r1Yz/42N6kwiGEPIw/+NXDW1KBT7++X2Qp+ORT3zn5kX1de7qD
      C3SrCKGpivr+fzzyp+/avK8/TFzIhX391bmnz1VZmtiaCqSD/NdenmVp8tR8GyH0h2/fZNre
      P708O1bRf+O13cfmWjXNnqzqn3lD3wf39Rq6DtNvINEkSRq2+7GvH3nTlrjC03/y2FhVs3sj
      QkJmX55svG9Pene3srcnkpIZUF0Gg0G/XTX0Lenq6rrON1bTtC/968g67fxm8UAY4+8fnnv4
      ZOkdtyS2pQNP/afXsNR5vSmJ0Ju2xL95MN82HZYmKIJ49FTpwFTjs/f3IYQcDz95tvKG4Zjp
      uBRJcjQZF8kf/ebeP39yIijQ//jS7H+6rycZYGzXoyni2ZHakZmWzNPv2Zn8yosz3WFBYEjN
      dP/2hemqZiOENielF8ZqUzXddLz/9tNRhacZirx/OIoQOj7X/MtnJuuarVrueEVjSHJnVq5q
      NkMRE1V9sqYHOOqjd/f2J883IYEJfGfJhy8Muv74t0+iCYJ403BIYqkXx+sTVT3I05x0PpiL
      EHrvrviv3p5t6M7b/+rVBzbHGIr82F3dqQCNEHI8PF7RPIy/eSCfkrm3bE9QNP21l2buGYxs
      ScmffaA/KrEkgd62Lf7V/bMMRUgcNRgXz5U0jFCxZe7MKn/82JjEUraLEUKTVZ2hCMM+ry38
      /ENnHtwce/P2VE01HzlRfGbk4vq6L03UX5qoI4Tghxij9+5J+9aDFokPl0S7WgA9RjJyfpSp
      1+udHezm5uZc1+3q7rbUhscEOsMKyLOKhZIQSskCZTTL81UVIay71Ob+LsKzK00zGr5Yov8L
      QaIZipQ46uhs89PfPfW6ocjH78z6cgtY71KgiQ/f0ZUJ8rfnAj8+Wa0bbpzBuuV+7M4cQRC/
      9pouRKCW4Xzs68ffuDV+/+YYSRAJ+XwyVeToAEeppvvr+7p7IsIfPDKi2y5FEK9ONWSO0i9Y
      zE9Pladrun9KIkv9h9dk//Kp0e8fLczWTQIhhiIsFyOEFJ52PaxaF6fl5bblOC7DXMEtrefH
      D4zMz1e1aCxG6nXC03GwW/JaRrtuYu72B949efasZVlHDz6nNUwv0ptgaqdGi+FkMi6SBiaq
      07Mo3J3NBLd3x77zL09EBY3L7Zk6fRCbrfGyxUjhD//7d1HrXApys0SiEUK240YkZmdW0Wz3
      06/vQxhDE7TzmleCJElic0LojUmaS374n47c0ReOSsxnv3/m3oGg59qu6/w/T08/M1Ldm1MU
      jsoInufhl6damRBHIGQ63u4u5ZmRal2337Uz9dX9s6bjhUTGxbhtummF0yzXw6ii2o53kVQ5
      Lv7+kcLLk42W4ZIE2pIKfPr1fc+O1TyMHQ+bziWC+bbpvHtXWuRXaggBJbn+n65jR1NZlmHT
      mXQyEXNdNx5PpNJpgTBOjsxs3nUb57V5JZpMJnmK6u/vFkNJkecz3V25dIKk6EQimQjSdScw
      NNDPMCiZzvXnUpFoPBxWREFKZLuxVlnvSPTNQqIxxl95+tx3D+c//8DAP70y+9/ePnyu2N7R
      dbE1yQ+OzLcM57274izLvjxZ/+jXj//5ezbvzAZCAqvrmq7ruq6faHJf+PG5L711aKpqvG1I
      iIeVD3/j1Ofu7//GgfyJfKtlOC3THYyJb94W/+Gx4kfv7P7LZybLbcvxME2Rjuvt6lImKnqA
      o6ZqBkUgd3XSIJJAn7in5127MumQKHDsyiLJVco5sOe22posL6ts8WGZOklzK68UoGnaH/50
      9LIHvTrcLAaEEJoo1MotnaHI/71/tivEnytpX3jjQPDCSmyW43kYk9hlGOZcUf21rx19xy2J
      sbL+huEoR5N3ZNiAwD16rvHFh0c3JcSdWeU/7kvSJDpbc7tC/FTNKLasrhA/2zB+dKz44nh9
      OCnJPF1V7fmmGZGY2brhYSQwpO1i8EBBnm4YC8ViFIFoiux0PJkg90fv2Hz3cGqVLTtuVIu7
      fPsKFoO7ItxEHCgXD1qGPt20OYZ84lxlR0Z505dfeeEz++AtZGkSIWRZLkJoKCF94NbM0yPV
      v/ilrbbrvTzZ+OzD05+4OxcSWYTQm7cmPnRHVrfcP3tifCAm7s2FYgHut//lZFRieyJCUuEw
      QjXNtl1sOq7C06bjeRh1h/iZhgExga3pwMl82z8xikAeRhghFyPv0mHrcw8O3rslc9Ulp1NT
      45VCWVCUVrO59ZYdZ48djXf3daViCKFGaZYKZgIsgZBTr+uhkOx/WJ2fzuVyCCGEvHKhYFpu
      JJ0VaKJSLkdjMYSQozfGCmo0wEViUTizN/zZ01d3hpfFTWRAJEnqLvEPL017GJ0tqNtS8p7u
      pduBA0PXrgAAHXlJREFUEwTxlm2Jt2xLpBTudKH9Z0+Mf+reXsv1bu0Jwv2iSZKlvDv6wrkw
      /8TZytdfndvdpXz38PzBaWqqZiCECi2r0LIQQkNx8VxJQwjd2hMsnbS6QvxgTLQ9fKbQxhgB
      HaIpkiIQz1Bt03E8jDGCAe69e1L3b11W67ManD59TuG4Lbfeuv/ppyWeMzVNr03+3c+e60ty
      pKFONNhkgqVIpzxS7r7tVnvmaL5q3vueXzv16pNPPIGkYBgRHqU1ZspqINPTF+XK+dlaXd13
      /1ta06dOl60Ibb3lXb/ELhIoXlvcRAaEENraHWsaI8fmWgih+Zb5B2/bBI3SOrexHK+s2n2x
      8wPuQIT7x1/d0TCcsbJ29wD9pq3xiar2jy9N1zX7Y3f1fPvg3K4upS8iAGuOSkwuzAsMVVYt
      niZnG+ZUzSAQikjMT44XPYwmqzpCaKSkcTTpYUx4GJjQZ+7vPzDVePhEiSCQxFK264UF5rfu
      GxT51bYqWxLd3d08TVMIZbJZhFAyk5EVbstmLkSbhq7f2pNEPOKREeEiDkJ8NMkqVIBBub5N
      GUpSTZdiKNZqJntogqE9D23aGmrV28l4BBvZfQlkeHhy7BTDr28k+uYyIIIg9vWFwIBenqi7
      GIM+C2qTEUIkSX7pkZGxsv61D+30BakkSeiW+7btic9879TH7szNNQ3HxdtTAYRQRbW/8erc
      yfn2g5tjPzlRvL0ntH+yfrao9sXEsbJGk8R7diUbunNkplnHKCYxpbYFAUzb9WiSABptOd4f
      PDyCECIJRJGE5XohgXn/3nQmstYHs2XL+cZhQ0NDCKG+oSGEUCy5aLsh+N92+F94976Vd5sI
      7+j8U9O0/7CvZ42nuhxuLgOiafo37ur72suzUYmNBdh3/PWBH3xsb0JmQdBeaJkBln5+tPY/
      37PFV51WVet/75/bngmwJPrg7dmGbmuWe19fwEPkP7w4XWyZv3Nf758/OSmyVH9MPFNQR4oa
      Rqih2yxFZII8S5Gm49V1h6NIx8MUQZycb0dEBiEEsWmEEM+QGCPD8fqi4kRF8zAqta2hZOBa
      NU+6DvjAa34xDAghFJGFj96ZOzLbPFtUddv98jOTX3jjAMuwTd1621+9+uF9XT/71GvQhbRX
      Q7f/y8PjH3pNdntGfnW69YUfnfkf797y1m0J27YRSbM0+aW3bnriTHm6pp+cb2OMFIEGp9LQ
      nYTMzjfNx06XCy2LJJDrYYElbQ8jhGqaTZEEQohACCPkYQQzr9GyRhCIJBFHU5sSy/arXy2s
      9tGzU4bWFnmGkmLpIHN2bGrHntugNd3s7Cz0xq/X6/7a9bOzszzlcpHuAEsghJrlskFRpOvG
      YjGzXTMpWRFohNDIqSOBRH8qevEM3/h/P7PWs10GN50BURT1qQc2f/OlsTMF9Zd3p4/Otf70
      8bF7BiP3DEb+z/v7Z+vGE2crr98UfehoISYx2zPye/ekPvfQmY/d2f3IyVJDd/7mualPv74P
      Y8/20LcP5m/JyLfn5K++jDBCGKGGfn5mLnGUwtNDcenZ0SpzYWbudoYQPcxQhOthfMF6ADBN
      +5v3DofoNbc4Mur5FuZMPSN5hhIPxXjt+JknfvQty8VCYtiqTZw65EyXNBxIDEQoWZReOj29
      rS8d460jL50JCTh/5rAU66OiQdSsRHl6ZLZMSdFILPzaPbsKhflSufG9kdmP/9r717sp0U0U
      ifYBstHvHsqfK2mu55Xa1g+OFt+0Nb49Lf/xT8fuHYw8P1b71oG5/pj4189NfeSO7B194amq
      8cip8v/73q0f2dc9XtVfGKsjhGbrxulCOx0Uvn+0YNieyFKOhykSkQjdNRCZrOon5tv3DkXG
      KxoYju15YB8kgXiGNJ0lIokkgTyM7uiL7upL+NWuq8clkWjs2YgJBbhwMMiIQYmjbNsOKnIs
      nrIdr7unOyyLyUw3K0jJSMA0LUGJ5LKpYFBmpUgmHlQCgXimWwrI6XiCJnGyqzcYDHVl06l4
      zNCapulKwQjlthq/OJroTuzqjX/5fdt/8xvH5psWQogk0If/6eh3fn33awdCm5PSeFULCsz9
      m2NvvyWJPHd3d1BkqaNzzTv6wgihbanAHz4y8ql7e2wP/8Uvbd0/0SAJojvM58LC82O1hMwF
      BVq13IpqCwzZExFElpI5WrPduwfCZwrquZLmYQTZsQBHqVanY0IEQv/zPVvu25xcfavoZcGH
      tvRd0q0BqPRlcb7wZ2h4uQ227bxkoadfIBLtgyCIO4ZSj/+28vfPj//DSzO2i0Mic66kEohI
      Klz9/2/vSoPkOMvz13dPd09Pn7OzM3trZZ1GMpJdtjlMccQuAy5zOJCQIg4hOIEUVMpVpkhS
      IVX5wQ9IJUUClSonhMQURSWxMQYH22CMsS0JGXQfu9qV9pqd++rp6fv48uOzVuu9LHl3LSma
      55fU293TM/PO9z7fez128JtZ48nj5Q/tTtME8ONwROP++u7Rhx8/2yPSFIE/+vs3f+VH444f
      4Rh2+5D0Tw/sLLW9R1+ZAwBYfiSy5G9mW1EMWQp/8kTZ9qNBJSGExLmKfb5mYwDgGBZByJD4
      rmzy0FQLAEBgYEBJpJPMX92zdVe/evn0GfVvXHW6fQOR6AXgON4jC39+11BWYv/26YnbBlMP
      PzG2IyNYfvTZOwfmW96h6daZUmf/QOq5s7Wv3jv6k1OVYtv7wl2Djx8r/dkPTn3tvm3TDeeT
      /350QE5ICaphB+MVCwCg8tR0w5ESlOGEHS/64nsGK6b/30eKPSLTtIMYAhLHwhjSBOaF8aGp
      lpygQghNN8yIzHcf3L/GSLUlgBA2m03f91fV1vQ7x8/NupbJJSiS13tT1Pj5mT37bkMkOp/P
      o9KzxSQ6n88niIhWBpIMBgAwqjWPJLAw1HXd6zQ8QkQkeuLMMSE90qtdCsPeQCR6CZLJ5Mf3
      0xSO3b1D/8TbMywOiTjAMAzDwPF8+59/d9f2Hu79o6m6HXzrV7MPv3coK9I7eoQ/ubP/Dx87
      4QTRvTt10wtRnXJGZGw/algBCuSQOLavP3Usbx6ZMwaURNMO/v6jOx47PD9VdwSGOF+1VZ7S
      eLpguKYXfXxv5kvvG31D6YXFsG0bzbJZ1eDcVsmEjOfmBIhItHNq/BdP/cCLINez3W9Ojx07
      MFuxoNCzRcFFnj94dm73SFZj/WO/HpdYUBw/KmgjhJoCZl1liIlCneAVVVPuuGVPtVKu1Y0n
      JuY//0e/t9kk+hpKpq4B0zRR4AcJCHEcl2+52RTz/VcLSZa4Z5tMM8y3fzXTn6I//LbXcgsv
      nKvfOij93TMTdw7LAIDZpvOvB/Kfe0f//oHUI0+O3XdzOorBE8dLv7NDP1MyTTfMiOyHdutf
      e/YCTWJ+BFWeqpg+iWMUgW3RuMc+s19aXRb58vG6ZKrbGis5ZGhpAhkKOU2gJicnA8fEcKLW
      DnVdJDzDhUytE2YEzDTNpk8O57QkGeY7pMTGzWKeFDQPYDwBfbMW00k3gLIqbxnov3DuhGn6
      7YjcmhMxRkurwubJPV0fBgQhLJfLHMeh0Wa2baPFIIxiDMOIi6LjSFV51qHzLfd+1C0PYRTD
      I3PtH5+qvHK+Ecaw5YQPvbP/v46U9uaSr1xoJmii40VRDFHIBwCAYwDDgMiQTSfconFJlowh
      /J+Hbt+QXerVysZ//fmpTbr5Ne3CUMcnymMgCRhELBZqjZfUwSDFcTWGrELV63UAgCzL03Xn
      Lx4/E0Fw9w4Nx8Djx8r/+et5CEEEwT079cMzhuGEKk99/l2DgxpfbrtKgvzlRP3uHfpPz1Qr
      pv/iZAMAMFFu7+xbOi/sOsID+zarkv+aNiAMw8rlciaToSgKqbQg0XjP80iSXJGRyLJMW5br
      ukjG9eWJ6n8cLr7nJvVc2SJwrGr6Gk9HcfzYg7dsy8oAgNP55suTtXu2q1qSQU2AEML3787h
      OP7uHdmnj84iA3r+bGVHTtlgPuGbx8bnPHuBRNPj56cvkei5fF//iiQ6pJVBRKIb1SqkyDhY
      RqJPHxN6Xkei7/3myxv55ItwTRsQACCdTi8MAapWqzRNy7KMxFNXm/jE8zxyExDCmh19+QMj
      Ixr/9OnKP74w/ZW7R7/+MY1jSI5l0FeyZ0h/26C2cC1qHUS77iAIvnMoj47/6ET5obu2XBGJ
      fmO4RrmzhESPPfvE93CSobVRt35h/AScLncgnx6RgSzKr5ye3r0lq7P+0UPn5AQsjh2j1EEp
      LfvtpkLjE4Uawau6Kt+275ZqrXLm9MkOFO69/36ZuZHKOZZjcVuMoiioMQ+5qoU2v9WuxTDs
      /j2Zb/z8QscLdYGuW/62TFKXlqbQ17hD3QpwDGREZqbhnCkYN/crYHXR3SsGLQz2kmTECjzJ
      JggAQF9/X1oRSIqttLzhm/fiXjszxNQ6YZqLbdvdtnWkL6sLVLgjSaQYmBZonFMgSTLZbGDW
      9udG3ABKsqTIqaYk1UpFKd1fnZ8xcLBqHGEjcH2Q6AV0Op12u410SdPp9IKm+BqXFA3X8cMT
      hc6ozt822nP5Xz+E8KkjM4/88Owf3JZ7abKxMyN84daU4zjZbFbTtDe+fiW8ZSQ6ikIMJ3AM
      AzcyiV4OQRAEQajX6zzPoyH2juOsfUlviv31dPNvnp6QOergI+rlGxCGYR/c0/fk8dKBC83z
      NXtnrzA8PGxZlmVZaCLHut/NJoIgXvfN3qAkejWQJBlFURiGoih2Oh2kZbHG+bcNSk/96b7j
      +faVeh+SJL/x0V35pvWZ751833bdNE3U625Z1ujo6IZw6rEjR9qBAeieZnn21jveNT/2apAa
      ziTJlMh7nnVqrLBz12jkh77n4AQhCgmn3WjEklOf7e3RWF50vGB2eiqVgGbEjwz1z5wfy/UP
      JSVlfmpczQ4r4mur3Y1LolcESZKlUimVShmGoet6vV5Ho+xXOx/DsEE5MazyV9pZDCF8/GiB
      IfEDj7yboqhGoxHH8ZYtW2ZmZgqFgizL6/f7rVpVzKXo9IhjVOUUbwtsGzg/fOolKdN/+3al
      MX/hO8fP3nxTFmvNhKmtBPA6pfN9+z5oVqvVymxxqmCy6vZ+tTk7nTewM+fmdI2aPPe/sqo/
      +8yLma27Pvep+zAisWbPz3pxnXGgBbiua5omAEAQBDTHyfM8x3GQdjNqR0RvDU1XtW07m81e
      qZ5VGIYNo01TlCjwaLhCqVRKp9P5fL7dbg8NDS1R+H5DLOdAzWqVZEmcFt1OS1FV12zGtFCY
      mdbUlO1HNI4bTignWQjjRr3J80wYxaKSCd0OjoPAccwAS1AYS+Om6Vh+rEsJxwtkvffc0Zf1
      0X1JwgWkkGCItygSjSZnXzuFQWsjiqJKpaJpGnpgwzCQcILv+z09PaZpchzXaDRUVXUcBymh
      Xr7QieM4nU7H930k2o1mkJMkKUkS2gDOzc1FUZRMJjmOu3xNqqsVif6HF6Y36eaXDCiRSFy4
      cEEQhFQqheQpNuklNxAL23jf98MwRGo6juOgyU4L0wuRcKmqqkhMeEUgWSDURm0YhmEY6BOg
      aXphiJ3jOGglY1k2CIJ8Pq8oSqFQoCgql8st16FejqtlQJONzVIcf50BOY7Dsmy9XjcMg+M4
      TdM2OHS2aUDJMqTevdq3iEY2Lz9uGAaaIoXEwnVdR2N7IYSmaWqahmTnkawsx3GdTockSZZl
      eZ4vlUoURaHFG83bX/s5lxvQ1NRUq1ZKiimc4pJqOn/ulJaWIaMNZGQQ2mMThZGbtqDertnZ
      2f5c5uTJU3pupFeXAAAgdCuGl1ZTAAAQ2oePnydj92379wOnVbbJ2G729Q9gGLBte/Nc2KVl
      BuWbAAC6rqdSqUajUSwWc7ncdbEUYRim63qxWEQWv6IAD0EQSEhwyfHF0+MbjQZYNJll4R8U
      RUmS5DhOs9nkeR4pUNm2LQgCkgpFs6fexJNPTEyYrepIVn/61dkvf+mPf3nywEGHMjy4e8cw
      sM3ZeWNsbmZLWvj580e279vBeFVCHbWLZx99rpgVschuztYDJqVLlHvfh97/02eeo2FYNCpY
      rTrXDmkl92D/wJt4pCvCqiQaeYQ4jtcYtH6todlsYhi2xl7dtm0k4L0ARMaRVQVB4Lpub2/v
      4vcbhqFlWclkEjGhSqWChtUhL2kYBoTQ931RFOM4TiQSLMsudLGt+ACLV6CpiTEPY2k8SjGY
      GeB4QnKNgt1sGgGhp1W3UXZCIqXJkd2u1u3M0MDOod5jJ04lmETTAxmJg2GnWu/EjKgm6W0j
      uYMHj8RUkk+EeAjJBG94oDcJwNUq54AQVioVQRDetGrppgKl5ZdIaEMIW60WGq264lVhGAZB
      gJYNz/M8z0ODVJH6k23bqqou8dpRFLXbbaSZGkWR4zgMw6Bzms2mZVlhGLqui1pw2u02juMx
      zT91vMDR5Htu0ntljl60Kfn/TKKvr208uCiKs/y453ntdjuKotVMHzEekiSR9ornech6AAC5
      XG6NrX6r1XJdN4qiRCIhy3KtVkP5OBQTRzeEEP7bocK3fjUDABBZ8luf2LU7wycSCVSEf7UM
      aLy2WWor1wG/WQ2rkTOGYRARRiVBy0nP4oaKVqulKIrneYqilEqltSd5S5KEtnsMw2AYhjJi
      SCUD8Xd02qfvoDEAGnbw6dv7h7Sk6zqNRoMkyeUZNLM6X217nJzOXOyS9tAoO2hfqLkjOX12
      aqJpRbLIXRzHsQwwPHzg0M79dwgMsfCOUpK05HfzkW8fWON9rQfX8Qp0OfA8r9PpLKg2AwDQ
      2G9kARBCNJmK53m0YgVBYBiGpmkcx61n94BI0gKt9n1/fn6+v7/f9/3FK1D+9KFHf3Lknju3
      zbciwpmplJzc8IgRUrcMcN/98cGv/uXDh176pSyK9drs+GRZ7e3jEjRwq2Yr4BTFiTFZEO79
      wDufffqnbTcQkkx+cjakxb4tQ3FrJvTovBV88bOfQvZ9o5e0rhMQQhSqjuMYVaIhVWWkxIv6
      A+v1OtpMIU+ESrA3cAMxOTmZyWRwHF9sQEZ5tuXGxVKNTYoiG1XmytnhkaZpU7HTtvybbr6l
      VThfbli6IpRLVVHv5WkcgMgxjJYD1bRK42B4IHvo0GEmKfMsHth+gFEkx/FkVC8U2yAxkuG7
      NdGbAghhvV63LAvRcESAFj4B13Vt2/Z9X5IkXV9dyuRKUKvV0EtcFQ70zRdnNunm1zEHWg8w
      DFNVlaIoVJvh+z7SFeR5HqXYFEVB6ogb9YqiKBaLxav1K7171woR1A3BDWpAAAA0Rl4UxTAM
      TdP0PM+yrCiKZFlGbst13cvPnQEAUCZktXCi4zgrJlJKMzPywACzyFHOTE2mlF4pdXGhiv0D
      rxzee/udHObOlKzBvtdWRK9dbUZcRuYBCE+fPi/xRKHW2rXn7RyFAwCa5TKXTi/cdvNI9I1r
      QAgYhlEUteDITNNEWXcAwGVKM7mu2263KYqqVquI4vT09CwxI3RDWZaRr1yMwvQ0NzDwwuPf
      LRtxSMjpDAPtZqNsRomedIYBMfnhD7yr1az//LnnbhrSDr7825jXVZFlyDBoV/v233fm1Rfd
      yPFDLSP4Ldt86ukqR+NB5VzR5D/y4CdzyU1f8G50A1oMjuMIgjAMI5lMonElazBolB1Dkcl2
      uy2KIgo7ua67WAbPdV2U1iVJEsWNlnCgzEB26uxEun9UzuKi3BtCK/J7ctmQS6XHxw5HpBzH
      cUpWRVUFePzOu95tOkGEEwIRADiQkrnkwACkGQrjydgkGsaQKHlh6It0P52iIbixxFauEaCv
      GW3Z+vv7V3RJQRDU63UkCI/qspGsGADAdV2k64MuLJVKiqL4vh8EAcMwiqJcPoneqMEMtm1/
      +6W5dd5kNXRXoKXgOK7ZbCYSCZqm5+bment7aZpGPIlhGBSnRvWQiHej0g6kKQ4WxS2jKPJ9
      v6+vDwWcoii60tKGDSy7vmvbxuwll6O7Aq0AlFVFNWUYhomiGEVRHMdoaWFZ1vM8ZEnIiyEp
      +zcMPNZqNUVRJOnSTKCZmZmBgUEMA1azNFX1dm0dWO40vU798MmZd9x+i9ssWaSii6+F0RvF
      GVIZEBkssJvnSzbuNgDFjYyOkBfvsKDb8haVc3SxANQq5Ps+SnGgejSKomq1miRJhmEs7M54
      nm80GpczbAqVL5qmudiApqenBgaUH3//qdlGixB7xsdO2OVpQAq9QyNjU/P9Ei6og3fuGW42
      6j977hmZjo5M1vRcLoHZoRu2a9W7PvHQgZ/9sF0r9uy9J5gff/k3F/bdsZfuzFeJ3tLJV4f3
      veOj97x3sz6ji+iuQGvB87xqtYrWG13XXdetVCq6ri9eJxa6fBAlWuNuzWaT47jFkcnJsdMx
      zXVKswQndUI8pwpmoxRinCQn89VWn64ADKZTiaNjeV3hfNumEskAYgSOBe0ayQp9W3cXJo4S
      BC1khv12pd1oUgk6cG1OydbmpjitVyT9q1bO0QXC4twZAKBarS6PLgZBsKCsi6IAy1P6KMsm
      SdKSEpS3AF0SfTWBYdgSi1neT40WHpqmkeRvp9NZbkCo3Gx5nSRCrTzP8qLlRj2aBABotVrI
      0xmNihUQ2R7Vs9oNO8xo8nKSVMrPa7lss1YVObbW8bNpbXnwYfNIdNeArgxrM2WKoiCEKzoy
      giBarRZJkqq6wpiYVw/8Yr4RURTFSarMxKKszJ2ffN9HPvXboyf37t3zyovPt6ulItB7yRqg
      1CCCdCIU5SGVDQtNu1osPPCxDz/+vcduvePWV84U9mwbBO2CEYk0z/TwGJHsHx1MP/AvBzfs
      I3g9LrkwAoM4SVVqrVzva734vu/TNJmfmU2q6RRHeyGGgSveiy4ADdPwPI9hSN8HNL208DT0
      nLYTKtIbd1otL21GXma1eR0bhTiO8/m8KIprd7gahpFKpcDFIDWqhWUYJpVKhWG4ogE1Gg3L
      MkEYk4LIEBgW+ZYXapmc2zEkSWy2TK/TgkySJQCJ4yEEIYw1WUYFtRiGJTl6bGJK07QQEAkK
      Cz3HjymOZ2K3k5AzWOQvVtG7UkRRCCEkyZXp3SUDqlXmoefNt4OUwNMMoYv82cn5W96+t14t
      iQlitlh0PZJLpqzaBV7qxWJPUrO8phXHjtgRm9b5aqlFcjQAmKrqNIgbnU7kejTLuK7HsnQy
      mSwUKpFrMimJoYHTCi0ACc8e2r7Nb1UsSIeO3bE9HIC0lmzZkIadkEhC34zIZFqkvSCyvZAh
      ItdxM30D88UKhcUkSdmBS0UYJKgIxkxstQKyV01GpDDct1xvYgOwMChtjQg1hBA1o6H/mqYp
      CAK4OAPEcZwlRdlvAdb5u1roiVvxr5dCVZ4bhHHMsUzHspqNZqVcTMkyAIBhmHbHSbAJmsJZ
      hpaUHpLEGZatFOYBAIqmaCnFdH0s8mOA8SxhOaEk0q7lcQnW8uwkn3Rdu+PjisQASGAkjeMk
      k0gMZiQIKKPdskM8dC0IQErRcr26G+E8S2A4wACpKEpW5Qw7AOh3Jms9aalUNbM9mp5O4zSX
      SBCeF2I4YFgGYFDgk44XUvib/7WtAQhhsVhco/kLFZGFYYhK2NDBMAxrtdrCJVelupym6dL8
      zLnzb6aiw2pVxy/MTZw5UTOWZvEQXluBUBIRHYqiqFarkSSJhnxd5iuFnocxzAZNzrl8RJ4H
      GeatYHKmadq2vUYvs23b6McKACAIguf5MAxbrdaSStaNKjC6Ihw/etwPvVtvve2NT3096sWZ
      sxfyJMASWnbPtqHlJ6zQP9XF/z9UCnOGB7cOX3GbWLtenqm0qaiTHtyuJFdoN+gaUBfrQncb
      3wWozp6baoQ5ja/X2zQvbB8dzk9PQkbq71XOHD9m+bEopZxWodQiFCXB4nizWaPEHp3Hak2j
      a0BdwOlCxbTCsyULYwWs1Rrsy5bK5XRfEgBomm3LCU6eOt2TTjXrUZJXDQdkM73Ts3MzpwoJ
      NdN1YV28ZgIQwkalYLhgZDAHIWxUi+Vae3h0lKUubY2WDx3oGlAX68I1PSmyi2sfXQPqYl3o
      GlAX60LXgLpYF7oG1MW60DWgLtaFrgF1sS50DaiLdaFrQF2sC10D6mJd6BpQF+vC/wE+OJzK
      Ju2YZgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='FilterBoard' width='192'>
      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
    </thumbnail>
    <thumbnail height='144' name='SIMILARITY: plot' width='174'>
      iVBORw0KGgoAAAANSUhEUgAAAK4AAACQCAIAAAAeHsdkAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAC9ElEQVR4nO3dMWiUZxzH8ceeVarUoUubIlKIQ6jQEAoFUVup
      hZqlgsNhIKBIqWAHY9FNCWKpQ6FiwVClUIIBwUwKAQMRoxFOKhIyVK5wBxWlHVocFAMOxzn0
      59rgINccn8/2PLwv/IcvvO/2X9FutwuU8lqnB+D/QgqEFAgpEFIgpEBIgZACIQVCCoQUCCkQ
      UiCkQEiBkAIhBUIKhBQIKRBSIKRASIGQAiEFQgqEFAgpEFIgpEBIgZACIQVCCoQUCCkQUiCk
      QEiBkAIhBUIKhBQIKRBSIKRASIFY2ekBXk69Xu/0CF1rmaVQSunr6+v0CN3JB4KQAiEFQgqE
      FAgpEFIgpEBIgZACIQVCCoQUCCkQUiCkQEiBkAIhBUIKhBQIKRBSIKRASIGQAiEFQgqEFAgp
      EFIgpEBIgZACIQVCCoQUCCkQUiCkQEiBkAIhBUIKhBS6VWt+bF/164lmjg8mv6merv3XC1Lo
      UotzV+/2b11/p9Zc+tl/SaE7Lf5aa3z06Zeb37k+Pd96cfn49o8HhqpDe4/8PP+klNK6P/Xd
      weFqdWjvsYl7T6TQnR5dv3b/4+39a7bt/PDu1bnF3P7WWHto/OLY/rdvnbkw3/p76qfxf7ac
      mLg4tuf1K2cvN5ffahCW9GDy2/HfH5Xj1alSSimzJ69sOjVQSunZ9tn7qyrlk639ZycbfzYe
      NtdvPti7qlIGRy8NLsctMSyleWP22RenLg33llJKaS2c++r8dHNgdSl/zc3c272vp3ZrYc3G
      7e9uXN37cPZmc9eet2o/HP5l7SEpdJ2FmZl1n3/f++JY6d+9a93R6fpgKT3vPb2wf+iPyoYd
      I6MDlTc/GDnQODE6fLn1xoYdI6MDK9rtdifnfkn1et3uqFfEbyMhBUIKhBQIKRBSIKRASIGQ
      AiEFQgqEFAgpEFIgpEBIgZACIQVCCoQUCCkQUiCkQEiBkAIhBUIKhBQIKRBSIKRASIGQAiEF
      QgqEFAgpEFIgpEBIgZACIQXiORu2ierRKnGCAAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
