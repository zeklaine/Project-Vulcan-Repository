<?xml version='1.0' encoding='utf-8' ?>

<workbook version='8.2' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <!-- build 8100.14.0408.1805                -->
  <preferences>
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='8.2'>
      <aliases enabled='yes' />
      <column caption='METRIC SELECT' datatype='string' name='[Bach Persist Percent - 200 Parameter]' param-domain-type='list' role='measure' type='nominal' value='&quot;Retention Percent - FT&quot;'>
        <calculation class='tableau' formula='&quot;Retention Percent - FT&quot;' />
        <members>
          <member value='&quot;Admissions Total&quot;' />
          <member value='&quot;Applicants Total&quot;' />
          <member value='&quot;Student/Faculty Ratio&quot;' />
          <member value='&quot;Retention Number - FT&quot;' />
          <member value='&quot;Retention Percent - FT&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='IPEDS_MAIN_2008-12' inline='true' name='csv.41817.609948333331' version='8.2'>
      <connection auto-extract='yes' character-set='65001' class='csv' directory='C:\Users\midtgaat\Desktop\R&amp;P Project\Data Files\IPEDS\IPEDs Subset' driver='' filename='IPEDS_MAIN_2008-12.csv' force-character-set='no' force-header='no' force-separator='no' header='yes' separator=','>
        <relation name='IPEDS_MAIN_2008-12#csv' table='[IPEDS_MAIN_2008-12#csv]' type='table' />
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' datatype-customized='true' name='[ACTCM25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTCM75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTEN25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTEN75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTMT25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTMT75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTNUM]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTPCT]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTWR25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTWR75]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[ACT_CODE]' role='dimension' type='ordinal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Academic/Career Counseling]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Admission Test Scores]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Admissions - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Admissions - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Admissions Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Applicants - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Applicants - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Applicants Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Associates Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Bach Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Binary EF]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Binary GR200]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Binary IC]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CALSYS]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CBSATYPE]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CBSA]' role='dimension' semantic-role='[CMSA].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[CITY]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CONTROL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CSA]' role='dimension' type='nominal'>
      </column>
      <column caption='c_Inst Concat' datatype='string' name='[Calculation_0340630102305428]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[UNITID] + &quot;:  &quot; + [INSTNM]' scope-isolation='false' />
      </column>
      <column caption='c_metricSelect' datatype='real' name='[Calculation_3210627144522902]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Bach Persist Percent - 200 Parameter]&#13;&#10;WHEN &apos;Applicants Total&apos; THEN [Applicants Total]&#13;&#10;WHEN &apos;Admissions Total&apos; THEN [Admissions Total]&#13;&#10;WHEN &apos;Student/Faculty Ratio&apos; THEN [Student/Faculty Ratio]&#13;&#10;WHEN &apos;Retention Number - FT&apos; THEN [Retention Number - FT]&#13;&#10;WHEN &apos;Retention Percent - FT&apos; THEN [Retention Percent - FT]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column aggregation='Sum' caption='Blend' datatype='integer' name='[Calculation_5200630103212456]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='1' scope-isolation='false' />
      </column>
      <column caption='c_Selected Inst' datatype='string' name='[Calculation_6740630103324117]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF MIN([Calculation_0340630102305428]) == MIN([IPEDS_MAIN_2008-12 (copy)].[Calculation_5530630103139859]) THEN&#13;&#10;    &quot;Selected Institution&quot;&#13;&#10;ELSE&#13;&#10;    &quot;Other&quot;&#13;&#10;END' scope-isolation='false' />
      </column>
      <column datatype='string' datatype-customized='true' name='[Doctors Deg - Other]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Doctors Deg - Research/Schol]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Doctors Deg = Prof Practice]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Employment Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled - Men]' role='measure' type='quantitative'>
      </column>
      <column aggregation='CountD' datatype='real' datatype-customized='true' name='[Enrolled - Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled FT - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled FT - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled Full Time Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled PT - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled PT - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled Part Time Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[FIPS]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[HOSPITAL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Historically Black]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[INSTCAT]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[INSTSIZE]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[LANDGRNT]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Avg' datatype='real' name='[Latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Less Than 1Yr Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Level]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Avg' datatype='real' name='[Longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[MEDICAL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Masters Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[No Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' datatype-customized='true' name='[OBEREG]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[OPEFLAG]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[OPENADMP]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[On-Campus Daycare]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[One but Less Than 2Yr Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Other Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[PSET4FLG]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Phone]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Placement Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Post-Masters Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Postbacc Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Recommendations]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Remedial Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATMT25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATMT75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATNUM]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATPCT]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATVR25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATVR75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATWR25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATWR75]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[STABBR]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Secondary School GPA]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Secondary School Rank]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Secondary School Record]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[TRIBAL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Two but Less Than 4Yr Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[UNITID]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Urbanization]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' name='[ZIP]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal'>
      </column>
      <column-instance column='[CITY]' derivation='None' name='[none:CITY:nk]' pivot='key' type='nominal' />
      <column-instance column='[Latitude]' derivation='None' name='[none:Latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Longitude]' derivation='None' name='[none:Longitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[STABBR]' derivation='None' name='[none:STABBR:nk]' pivot='key' type='nominal' />
      <group caption='Action (CITY,Latitude,Longitude,STABBR)' hidden='true' name='[Action (CITY,Latitude,Longitude,STABBR)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[CITY]' />
          <groupfilter function='level-members' level='[Latitude]' />
          <groupfilter function='level-members' level='[Longitude]' />
          <groupfilter function='level-members' level='[STABBR]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (CITY,Latitude,Longitude,STABBR)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:CITY:nk]' />
          <groupfilter function='level-members' level='[none:Latitude:qk]' />
          <groupfilter function='level-members' level='[none:Longitude:qk]' />
          <groupfilter function='level-members' level='[none:STABBR:nk]' />
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='C:\PROJECTS\IPEDS\New Data\IPEDS_MAIN_2008-12#csv (IPEDS_MAIN_2008-12.csv).tde' schema='Extract' tablename='Extract' update-time='6/27/2014 7:39:15 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='37327' timestamp-start='2014-06-27 19:39:15.526000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='IPEDS_MAIN_2008-12 (copy)'>
        <column caption='c_Inst Concat' datatype='string' name='[Calculation_5530630103139859]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='[UNITID] + &quot;:  &quot; + [INSTNM]' scope-isolation='false' />
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='Parameters'>
        <column caption='METRIC SELECT' datatype='string' name='[Bach Persist Percent - 200 Parameter]' param-domain-type='list' role='measure' type='nominal' value='&quot;Retention Percent - FT&quot;'>
          <calculation class='tableau' formula='&quot;Retention Percent - FT&quot;' />
          <members>
            <member value='&quot;Admissions Total&quot;' />
            <member value='&quot;Applicants Total&quot;' />
            <member value='&quot;Student/Faculty Ratio&quot;' />
            <member value='&quot;Retention Number - FT&quot;' />
            <member value='&quot;Retention Percent - FT&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
    <datasource caption='IPEDS_RACE_2008-12' inline='true' name='csv.41820.420062905090' version='8.2'>
      <connection auto-extract='yes' character-set='65001' class='csv' directory='C:/PROJECTS/IPEDS/New Data/' driver='' filename='IPEDS_RACE_2008-12.csv' force-character-set='no' force-header='no' force-separator='no' header='yes' separator=','>
        <relation name='IPEDS_RACE_2008-12#csv' table='[IPEDS_RACE_2008-12#csv]' type='table' />
      </connection>
      <column datatype='string' datatype-customized='true' name='[Cohort Status]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Cohort Type]' role='dimension' type='nominal'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' datatype-customized='true' name='[UNITID]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
      </column>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource inline='true' name='IPEDS_MAIN_2008-12 (copy)' version='8.2'>
      <connection auto-extract='yes' character-set='65001' class='csv' directory='C:\Users\midtgaat\Desktop\R&amp;P Project\Data Files\IPEDS\IPEDs Subset' driver='' filename='IPEDS_MAIN_2008-12.csv' force-character-set='no' force-header='no' force-separator='no' header='yes' separator=','>
        <relation name='IPEDS_MAIN_2008-12#csv' table='[IPEDS_MAIN_2008-12#csv]' type='table' />
      </connection>
      <aliases enabled='yes' />
      <column datatype='real' datatype-customized='true' name='[ACTCM25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTCM75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTEN25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTEN75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTMT25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTMT75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTNUM]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTPCT]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTWR25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[ACTWR75]' role='measure' type='quantitative'>
      </column>
      <column datatype='integer' name='[ACT_CODE]' role='dimension' type='ordinal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Academic/Career Counseling]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Admission Test Scores]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Admissions - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Admissions - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Admissions Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Applicants - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Applicants - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Applicants Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Associates Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Bach Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Binary EF]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Binary GR200]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Binary IC]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CALSYS]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CBSATYPE]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CBSA]' role='dimension' semantic-role='[CMSA].[Name]' type='nominal'>
      </column>
      <column datatype='string' name='[CITY]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CONTROL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[CSA]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Sum' caption='Blend' datatype='integer' name='[Calculation_2980630103225992]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='1' scope-isolation='false' />
      </column>
      <column caption='c_metricSelect' datatype='real' name='[Calculation_3210627144522902]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Bach Persist Percent - 200 Parameter]&#13;&#10;WHEN &apos;Applicants Total&apos; THEN [Applicants Total]&#13;&#10;WHEN &apos;Admissions Total&apos; THEN [Admissions Total]&#13;&#10;WHEN &apos;Student/Faculty Ratio&apos; THEN [Student/Faculty Ratio]&#13;&#10;WHEN &apos;Retention Number - FT&apos; THEN [Retention Number - FT]&#13;&#10;WHEN &apos;Retention Percent - FT&apos; THEN [Retention Percent - FT]&#13;&#10;END' scope-isolation='false' />
      </column>
      <column caption='c_Inst Concat' datatype='string' name='[Calculation_5530630103139859]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[UNITID] + &quot;:  &quot; + [INSTNM]' scope-isolation='false' />
      </column>
      <column datatype='string' datatype-customized='true' name='[Doctors Deg - Other]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Doctors Deg - Research/Schol]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Doctors Deg = Prof Practice]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Employment Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled - Men]' role='measure' type='quantitative'>
      </column>
      <column aggregation='CountD' datatype='real' datatype-customized='true' name='[Enrolled - Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled FT - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled FT - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled Full Time Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled PT - Men]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled PT - Women]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[Enrolled Part Time Total]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[FIPS]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[HOSPITAL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Historically Black]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[INSTCAT]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[INSTSIZE]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[LANDGRNT]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Avg' datatype='real' name='[Latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Less Than 1Yr Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Level]' role='dimension' type='nominal'>
      </column>
      <column aggregation='Avg' datatype='real' name='[Longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
      </column>
      <column datatype='string' datatype-customized='true' name='[MEDICAL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Masters Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[No Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' datatype-customized='true' name='[OBEREG]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[OPEFLAG]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[OPENADMP]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[On-Campus Daycare]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[One but Less Than 2Yr Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Other Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[PSET4FLG]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Phone]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Placement Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Post-Masters Deg]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Postbacc Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Recommendations]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Remedial Services]' role='dimension' type='nominal'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATMT25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATMT75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATNUM]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATPCT]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATVR25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATVR75]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATWR25]' role='measure' type='quantitative'>
      </column>
      <column datatype='real' datatype-customized='true' name='[SATWR75]' role='measure' type='quantitative'>
      </column>
      <column datatype='string' name='[STABBR]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Secondary School GPA]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Secondary School Rank]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Secondary School Record]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[TRIBAL]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Two but Less Than 4Yr Cert]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[UNITID]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[Urbanization]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
      </column>
      <column datatype='string' name='[ZIP]' role='dimension' semantic-role='[ZipCode].[Name]' type='nominal'>
      </column>
      <column-instance column='[CITY]' derivation='None' name='[none:CITY:nk]' pivot='key' type='nominal' />
      <column-instance column='[Latitude]' derivation='None' name='[none:Latitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Longitude]' derivation='None' name='[none:Longitude:qk]' pivot='key' type='quantitative' />
      <column-instance column='[STABBR]' derivation='None' name='[none:STABBR:nk]' pivot='key' type='nominal' />
      <group caption='Action (CITY,Latitude,Longitude,STABBR)' hidden='true' name='[Action (CITY,Latitude,Longitude,STABBR)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[CITY]' />
          <groupfilter function='level-members' level='[Latitude]' />
          <groupfilter function='level-members' level='[Longitude]' />
          <groupfilter function='level-members' level='[STABBR]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (CITY,Latitude,Longitude,STABBR)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:CITY:nk]' />
          <groupfilter function='level-members' level='[none:Latitude:qk]' />
          <groupfilter function='level-members' level='[none:Longitude:qk]' />
          <groupfilter function='level-members' level='[none:STABBR:nk]' />
        </groupfilter>
      </group>
      <extract count='-1' enabled='true' units='records'>
        <connection class='dataengine' dbname='C:\PROJECTS\IPEDS\New Data\IPEDS_MAIN_2008-12#csv (IPEDS_MAIN_2008-12.csv) copy 1.tde' schema='Extract' tablename='Extract' update-time='6/27/2014 7:39:15 PM'>
          <relation name='Extract' table='[Extract].[Extract]' type='table' />
          <calculations>
            <calculation column='[Number of Records]' formula='1' />
          </calculations>
          <refresh>
            <refresh-event add-from-file-path='' increment-value='%null%' refresh-type='create' rows-inserted='37327' timestamp-start='2014-06-27 19:39:15.526000' />
          </refresh>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='METRIC SELECT' datatype='string' name='[Bach Persist Percent - 200 Parameter]' param-domain-type='list' role='measure' type='nominal' value='&quot;Retention Percent - FT&quot;'>
          <calculation class='tableau' formula='&quot;Retention Percent - FT&quot;' />
          <members>
            <member value='&quot;Admissions Total&quot;' />
            <member value='&quot;Applicants Total&quot;' />
            <member value='&quot;Student/Faculty Ratio&quot;' />
            <member value='&quot;Retention Number - FT&quot;' />
            <member value='&quot;Retention Percent - FT&quot;' />
          </members>
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Online' />
  </mapsources>
  <shared-views>
    <shared-view name='csv.41817.609948333331'>
      <datasources>
        <datasource caption='IPEDS_MAIN_2008-12' name='csv.41817.609948333331' />
      </datasources>
      <datasource-dependencies datasource='csv.41817.609948333331'>
        <column datatype='string' name='[CONF]' role='dimension' type='nominal'>
        </column>
        <column datatype='string' name='[INSTNM]' role='dimension' type='nominal'>
        </column>
        <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
        </column>
        <column-instance column='[CONF]' derivation='None' name='[none:CONF:nk]' pivot='key' type='nominal' />
        <column-instance column='[INSTNM]' derivation='None' name='[none:INSTNM:nk]' pivot='key' type='nominal' />
        <column-instance column='[YEAR]' derivation='None' name='[none:YEAR:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <filter class='categorical' column='[csv.41817.609948333331].[none:CONF:nk]'>
        <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
          <groupfilter function='member' level='[none:CONF:nk]' member='%null%' />
          <groupfilter from='&quot;ACC&quot;' function='range' level='[none:CONF:nk]' to='&quot;Sun Belt&quot;' />
        </groupfilter>
      </filter>
      <filter class='categorical' column='[csv.41817.609948333331].[none:INSTNM:nk]'>
        <groupfilter function='level-members' level='[none:INSTNM:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
      </filter>
      <filter class='categorical' column='[csv.41817.609948333331].[none:YEAR:nk]'>
        <groupfilter function='member' level='[none:YEAR:nk]' member='&quot;2012&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
      </filter>
    </shared-view>
  </shared-views>
  <actions>
    <action caption='Filter 1 (generated)' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='MapBoard' type='sheet' worksheet='Map' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='MapBoard' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Bar Chart'>
      <table>
        <view>
          <datasources>
            <datasource caption='IPEDS_MAIN_2008-12' name='csv.41817.609948333331' />
            <datasource name='Parameters' />
            <datasource caption='IPEDS_RACE_2008-12' name='csv.41820.420062905090' />
          </datasources>
          <datasource-dependencies datasource='csv.41817.609948333331'>
            <column datatype='string' datatype-customized='true' name='[CALSYS]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[CONF]' role='dimension' type='nominal'>
            </column>
            <column caption='c_metricSelect' datatype='real' name='[Calculation_3210627144522902]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CASE [Parameters].[Bach Persist Percent - 200 Parameter]&#13;&#10;WHEN &apos;Applicants Total&apos; THEN [Applicants Total]&#13;&#10;WHEN &apos;Admissions Total&apos; THEN [Admissions Total]&#13;&#10;WHEN &apos;Student/Faculty Ratio&apos; THEN [Student/Faculty Ratio]&#13;&#10;WHEN &apos;Retention Number - FT&apos; THEN [Retention Number - FT]&#13;&#10;WHEN &apos;Retention Percent - FT&apos; THEN [Retention Percent - FT]&#13;&#10;END' scope-isolation='false' />
            </column>
            <column aggregation='CountD' datatype='real' datatype-customized='true' name='[Enrolled - Total]' role='measure' type='quantitative'>
            </column>
            <column datatype='string' name='[INSTNM]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[STABBR]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
            </column>
            <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[Calculation_3210627144522902]' derivation='Avg' name='[avg:Calculation_3210627144522902:qk]' pivot='key' type='quantitative' />
            <column-instance column='[INSTNM]' derivation='CountD' name='[ctd:INSTNM:qk]' pivot='key' type='quantitative' />
            <column-instance column='[CALSYS]' derivation='None' name='[none:CALSYS:nk]' pivot='key' type='nominal' />
            <column-instance column='[CONF]' derivation='None' name='[none:CONF:nk]' pivot='key' type='nominal' />
            <column-instance column='[INSTNM]' derivation='None' name='[none:INSTNM:nk]' pivot='key' type='nominal' />
            <column-instance column='[STABBR]' derivation='None' name='[none:STABBR:nk]' pivot='key' type='nominal' />
            <column-instance column='[YEAR]' derivation='None' name='[none:YEAR:nk]' pivot='key' type='nominal' />
            <column-instance column='[Enrolled - Total]' derivation='Sum' name='[sum:Enrolled - Total:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <datasource-dependencies datasource='csv.41820.420062905090'>
            <column datatype='string' datatype-customized='true' name='[UNITID]' role='dimension' type='nominal'>
            </column>
          </datasource-dependencies>
          <filter class='quantitative' column='[csv.41817.609948333331].[ctd:INSTNM:qk]' included-values='in-range'>
            <min>0</min>
            <max>1</max>
          </filter>
          <filter class='categorical' column='[csv.41817.609948333331].[none:CALSYS:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:CALSYS:nk]' member='%null%' />
              <groupfilter from='&quot;-2&quot;' function='range' level='[none:CALSYS:nk]' to='&quot;7&quot;' />
            </groupfilter>
          </filter>
          <sort class='computed' column='[csv.41817.609948333331].[none:INSTNM:nk]' direction='DESC' using='[csv.41817.609948333331].[avg:Calculation_3210627144522902:qk]'>
          </sort>
          <filter class='categorical' column='[csv.41817.609948333331].[none:STABBR:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:STABBR:nk]' member='%null%' />
              <groupfilter from='&quot;AK&quot;' function='range' level='[none:STABBR:nk]' to='&quot;WY&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[csv.41817.609948333331].[sum:Enrolled - Total:qk]' included-values='in-range'>
            <min>0.0</min>
            <max>47123.0</max>
          </filter>
          <slices>
            <column>[csv.41817.609948333331].[ctd:INSTNM:qk]</column>
            <column>[csv.41817.609948333331].[none:INSTNM:nk]</column>
            <column>[csv.41817.609948333331].[none:YEAR:nk]</column>
            <column>[csv.41817.609948333331].[none:CONF:nk]</column>
            <column>[csv.41817.609948333331].[sum:Enrolled - Total:qk]</column>
            <column>[csv.41817.609948333331].[none:CALSYS:nk]</column>
            <column>[csv.41817.609948333331].[none:STABBR:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[csv.41817.609948333331].[avg:Calculation_3210627144522902:qk]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[csv.41817.609948333331].[none:INSTNM:nk]' value='true' />
            <format attr='display' field='[csv.41817.609948333331].[ctd:INSTNM:qk]' value='true' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[csv.41817.609948333331].[none:INSTNM:nk]' value='Cohort Members:'>
              <formatted-text>
                <run>Cohort Members:</run>
              </formatted-text>
            </format>
            <format attr='title' field='[csv.41817.609948333331].[ctd:INSTNM:qk]' value='Cohort Members:'>
              <formatted-text>
                <run>Cohort Members:</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[csv.41817.609948333331].[none:INSTNM:nk]</rows>
        <cols>[csv.41817.609948333331].[avg:Calculation_3210627144522902:qk]</cols>
        <join-lod-include-overrides>
          <column>[csv.41820.420062905090].[UNITID]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Map'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Use Checkbox Filter or click/drag map area to refine the cohort:</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='IPEDS_MAIN_2008-12' name='csv.41817.609948333331' />
          </datasources>
          <mapsources>
            <mapsource name='Online' />
          </mapsources>
          <datasource-dependencies datasource='csv.41817.609948333331'>
            <column datatype='string' name='[CITY]' role='dimension' semantic-role='[City].[Name]' type='nominal'>
            </column>
            <column datatype='string' name='[CONF]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[INSTNM]' role='dimension' type='nominal'>
            </column>
            <column aggregation='Avg' datatype='real' name='[Latitude]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative'>
            </column>
            <column aggregation='Avg' datatype='real' name='[Longitude]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative'>
            </column>
            <column datatype='string' name='[STABBR]' role='dimension' semantic-role='[State].[Name]' type='nominal'>
            </column>
            <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[CITY]' derivation='None' name='[none:CITY:nk]' pivot='key' type='nominal' />
            <column-instance column='[CONF]' derivation='None' name='[none:CONF:nk]' pivot='key' type='nominal' />
            <column-instance column='[INSTNM]' derivation='None' name='[none:INSTNM:nk]' pivot='key' type='nominal' />
            <column-instance column='[Latitude]' derivation='None' name='[none:Latitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Longitude]' derivation='None' name='[none:Longitude:qk]' pivot='key' type='quantitative' />
            <column-instance column='[STABBR]' derivation='None' name='[none:STABBR:nk]' pivot='key' type='nominal' />
            <column-instance column='[YEAR]' derivation='None' name='[none:YEAR:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41817.609948333331].[Exclusions (CITY,Latitude,Longitude,STABBR)]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:CITY:nk]' />
                <groupfilter function='level-members' level='[none:Latitude:qk]' />
                <groupfilter function='level-members' level='[none:Longitude:qk]' />
                <groupfilter function='level-members' level='[none:STABBR:nk]' />
              </groupfilter>
              <groupfilter function='reorder-dimensionality'>
                <groupfilter function='union'>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;AS&quot;' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Pago Pago&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='-170.74276900000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='-14.322592' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='-170.742728' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='-14.322587' />
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;FM&quot;' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Pohnpei&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='158.20923099999999' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='6.9552500000000004' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='158.212434' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='6.9610339999999997' />
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;GU&quot;' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Mangilao&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.80240000000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.433054' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.802413' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.433055' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.80264399999999' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.449159999999999' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.802719' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.449165000000001' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.80283700000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.432726000000001' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.80336800000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.43689' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.80887000000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.440156999999999' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.80892700000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.440160000000001' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='144.808944' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='13.440649000000001' />
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;HI&quot;' />
                    <groupfilter function='union'>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Hilo&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.231426' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.630054000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.08132900000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.701854000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.08052799999999' />
                            <groupfilter function='union'>
                              <groupfilter function='member' level='[none:Latitude:qk]' member='19.699031999999999' />
                              <groupfilter function='member' level='[none:Latitude:qk]' member='19.699033' />
                            </groupfilter>
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.07772700000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.700675' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.07748599999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.700763999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.07003900000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.706104' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.069929' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.706112000000001' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Honolulu&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.888272' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.326909000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.88819699999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.327037000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.87487999999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.319946000000002' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.870454' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.320484' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.87039300000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.320515' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86386300000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.308140000000002' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86382' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.308206999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.863315' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.308509999999998' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86300800000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.310185000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.862753' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.310293999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.862651' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.310091' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86195799999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.313504999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86166499999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.311329000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.861626' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.311351999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86154300000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.308491' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86153400000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.313735999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86147299999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.308471000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86093299999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.314212999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.860916' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.308026000000002' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86087900000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.313924' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86081100000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.300174999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.860668' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.300265' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86039500000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.300446000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86019999999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.309436999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86013' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.309419999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86005700000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.310956000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.86002300000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.309273000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.85995600000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.311008999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='union'>
                              <groupfilter function='member' level='[none:Longitude:qk]' member='-157.85928000000001' />
                              <groupfilter function='member' level='[none:Longitude:qk]' member='-157.85927899999999' />
                            </groupfilter>
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.310141999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.847532' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.295304999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.84704099999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.295095' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.84228899999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.299213000000002' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.841613' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.292717' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.84158400000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.298964999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.84152900000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.298959' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.84140400000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.293023999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.84140199999999' />
                            <groupfilter function='union'>
                              <groupfilter function='member' level='[none:Latitude:qk]' member='21.293049' />
                              <groupfilter function='member' level='[none:Latitude:qk]' member='21.299351000000001' />
                            </groupfilter>
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.819919' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.29683' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.819917' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.296803000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.81955099999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.299381' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.81830400000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.300073000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.81725800000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.299292999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.816607' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.292648' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.80790999999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.287285000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.80764199999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.290274' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.80600100000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.290623' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.800543' />
                            <groupfilter function='union'>
                              <groupfilter function='member' level='[none:Latitude:qk]' member='21.282081000000002' />
                              <groupfilter function='member' level='[none:Latitude:qk]' member='21.282081999999999' />
                            </groupfilter>
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.80041299999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.271356999999998' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.80014199999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.271014999999998' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.79953' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.270541000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.754955' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.296361000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.75473199999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.296375000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.75471899999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.296438999999999' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Kahului&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-156.47985399999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='20.890561000000002' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-156.46326500000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='20.892946999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-156.46322799999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='20.892918000000002' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Kailua Kona&quot;' />
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='-156.04118700000001' />
                          <groupfilter function='union'>
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.729351000000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.729351999999999' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Kamuela&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.714449' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='19.888141999999998' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.67321899999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='20.016227000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-155.65978100000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='20.017720000000001' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Kaneohe&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.81344799999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.409275000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.81321199999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.409220000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.81074100000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.409001' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Kapolei&quot;' />
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='-158.093177' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='21.333351' />
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Laie&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.92535799999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.641172000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.92477600000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.645405' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.92476199999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.645410999999999' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Lihue&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-159.433076' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.962681' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-159.43305599999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.962712' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-159.39596599999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.969508999999999' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                      <groupfilter function='crossjoin'>
                        <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Pearl City&quot;' />
                        <groupfilter function='union'>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.98509899999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.392802' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.98419100000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.394926000000002' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.98210499999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.394141999999999' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.98201900000001' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.394065000000001' />
                          </groupfilter>
                          <groupfilter function='crossjoin'>
                            <groupfilter function='member' level='[none:Longitude:qk]' member='-157.98043999999999' />
                            <groupfilter function='member' level='[none:Latitude:qk]' member='21.393452' />
                          </groupfilter>
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;MH&quot;' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Majuro&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='171.37832800000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='7.102983' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='171.37840399999999' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='7.1029819999999999' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='171.37844200000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='7.1027399999999998' />
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;MP&quot;' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Saipan&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='145.721712' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='15.152353' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='145.721733' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='15.152246999999999' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='145.72176400000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='15.152352' />
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:STABBR:nk]' member='&quot;PW&quot;' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:CITY:nk]' member='&quot;Koror&quot;' />
                      <groupfilter function='union'>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='134.47195600000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='7.3422099999999997' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='134.47199000000001' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='7.342212' />
                        </groupfilter>
                        <groupfilter function='crossjoin'>
                          <groupfilter function='member' level='[none:Longitude:qk]' member='134.47404299999999' />
                          <groupfilter function='member' level='[none:Latitude:qk]' member='7.3429130000000002' />
                        </groupfilter>
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <order>
                  <hierarchy name='[none:CITY:nk]' />
                  <hierarchy name='[none:Latitude:qk]' />
                  <hierarchy name='[none:Longitude:qk]' />
                  <hierarchy name='[none:STABBR:nk]' />
                </order>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[csv.41817.609948333331].[Exclusions (CITY,Latitude,Longitude,STABBR)]</column>
            <column>[csv.41817.609948333331].[none:YEAR:nk]</column>
            <column>[csv.41817.609948333331].[none:INSTNM:nk]</column>
            <column>[csv.41817.609948333331].[none:CONF:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='um_light_countries' value='true' />
            <format attr='enabled' id='um_light_states' value='true' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='false' />
            <format attr='enabled' id='pp2_statelabels' value='false' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[csv.41817.609948333331].[none:CITY:nk]' />
              <lod column='[csv.41817.609948333331].[none:STABBR:nk]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>CITY:&#9;</run>
                <run bold='true'>&lt;[csv.41817.609948333331].[none:CITY:nk]&gt;&#10;</run>
                <run fontcolor='#787878'>STATE:</run>
                <run bold='true' fontcolor='#787878'>Æ&#9;</run>
                <run bold='true'>&lt;[csv.41817.609948333331].[none:STABBR:nk]&gt;&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.42779004573822021' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[csv.41817.609948333331].[none:Latitude:qk]</rows>
        <cols>[csv.41817.609948333331].[none:Longitude:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='SIMILARITY: plot'>
      <table>
        <view>
          <datasources>
            <datasource caption='IPEDS_MAIN_2008-12' name='csv.41817.609948333331' />
            <datasource name='IPEDS_MAIN_2008-12 (copy)' />
          </datasources>
          <datasource-dependencies datasource='IPEDS_MAIN_2008-12 (copy)'>
            <column aggregation='Sum' caption='Blend' datatype='integer' name='[Calculation_2980630103225992]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='1' scope-isolation='false' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='csv.41817.609948333331'>
            <column datatype='string' name='[CONF]' role='dimension' type='nominal'>
            </column>
            <column caption='c_Inst Concat' datatype='string' name='[Calculation_0340630102305428]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[UNITID] + &quot;:  &quot; + [INSTNM]' scope-isolation='false' />
            </column>
            <column datatype='string' name='[INSTNM]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[CONF]' derivation='None' name='[none:CONF:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_0340630102305428]' derivation='None' name='[none:Calculation_0340630102305428:nk]' pivot='key' type='nominal' />
            <column-instance column='[INSTNM]' derivation='None' name='[none:INSTNM:nk]' pivot='key' type='nominal' />
            <column-instance column='[YEAR]' derivation='None' name='[none:YEAR:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41817.609948333331].[none:Calculation_0340630102305428:nk]'>
            <groupfilter function='member' level='[none:Calculation_0340630102305428:nk]' member='&quot;153658:  University of Iowa&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[csv.41817.609948333331].[none:Calculation_0340630102305428:nk]</column>
            <column>[csv.41817.609948333331].[none:CONF:nk]</column>
            <column>[csv.41817.609948333331].[none:INSTNM:nk]</column>
            <column>[csv.41817.609948333331].[none:YEAR:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
        <join-lod-include-overrides>
          <column>[IPEDS_MAIN_2008-12 (copy)].[Calculation_2980630103225992]</column>
        </join-lod-include-overrides>
      </table>
    </worksheet>
    <worksheet name='Sheet 3'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontsize='10'>Institutions&#10;Selected:</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='IPEDS_MAIN_2008-12' name='csv.41817.609948333331' />
          </datasources>
          <datasource-dependencies datasource='csv.41817.609948333331'>
            <column datatype='string' name='[CONF]' role='dimension' type='nominal'>
            </column>
            <column datatype='string' name='[INSTNM]' role='dimension' type='nominal'>
            </column>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column datatype='string' datatype-customized='true' name='[YEAR]' role='dimension' type='nominal'>
            </column>
            <column-instance column='[CONF]' derivation='None' name='[none:CONF:nk]' pivot='key' type='nominal' />
            <column-instance column='[INSTNM]' derivation='None' name='[none:INSTNM:nk]' pivot='key' type='nominal' />
            <column-instance column='[YEAR]' derivation='None' name='[none:YEAR:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[csv.41817.609948333331].[Action (CITY,Latitude,Longitude,STABBR)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[CITY]' />
              <groupfilter function='level-members' level='[Latitude]' />
              <groupfilter function='level-members' level='[Longitude]' />
              <groupfilter function='level-members' level='[STABBR]' />
            </groupfilter>
          </filter>
          <slices>
            <column>[csv.41817.609948333331].[Action (CITY,Latitude,Longitude,STABBR)]</column>
            <column>[csv.41817.609948333331].[none:YEAR:nk]</column>
            <column>[csv.41817.609948333331].[none:INSTNM:nk]</column>
            <column>[csv.41817.609948333331].[none:CONF:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' value='83' />
            <format attr='width' value='122' />
            <format attr='text-align' value='center' />
            <format attr='vertical-align' value='center' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width-header' value='10' />
            <format attr='height-header' value='12' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='20' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[csv.41817.609948333331].[sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows></rows>
        <cols></cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='FilterBoard'>
      <style>
      </style>
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='80625' id='2' param='vert' type='layout-flow' w='34500' x='50300' y='10250'>
          <zone h='6375' id='12' param='[Parameters].[Bach Persist Percent - 200 Parameter]' type='paramctrl' w='34500' x='50300' y='10250'>
            <formatted-text>
              <run>Select a Metric:</run>
            </formatted-text>
          </zone>
          <zone h='74250' id='5' name='Bar Chart' w='34500' x='50300' y='16625'>
          </zone>
        </zone>
        <zone h='78750' id='13' param='vert' type='layout-flow' w='14000' x='85500' y='9375'>
          <zone h='17125' id='10' name='Bar Chart' param='[csv.41817.609948333331].[none:YEAR:nk]' type='filter' w='14000' x='85500' y='9375'>
          </zone>
          <zone h='45250' id='14' name='Bar Chart' param='[csv.41817.609948333331].[none:INSTNM:nk]' type='filter' w='14000' x='85500' y='26500'>
          </zone>
          <zone h='16375' id='15' name='Sheet 3' show-title='true' w='14000' x='85500' y='71750'>
          </zone>
        </zone>
        <zone h='77125' id='16' param='vert' type='layout-flow' w='49000' x='600' y='11000'>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='MapBoard'>
      <style>
      </style>
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='77125' id='1' param='vert' type='layout-flow' w='49000' x='600' y='11000'>
          <zone h='77125' id='4' name='Map' show-title='true' w='49000' x='600' y='11000'>
          </zone>
        </zone>
        <zone h='80625' id='2' param='vert' type='layout-flow' w='34500' x='50300' y='10250'>
          <zone h='6375' id='12' param='[Parameters].[Bach Persist Percent - 200 Parameter]' type='paramctrl' w='34500' x='50300' y='10250'>
            <formatted-text>
              <run>Select a Metric:</run>
            </formatted-text>
          </zone>
          <zone h='74250' id='5' name='Bar Chart' w='34500' x='50300' y='16625'>
          </zone>
        </zone>
        <zone h='78750' id='13' param='vert' type='layout-flow' w='14000' x='85500' y='9375'>
          <zone h='17125' id='10' name='Bar Chart' param='[csv.41817.609948333331].[none:YEAR:nk]' type='filter' w='14000' x='85500' y='9375'>
          </zone>
          <zone h='45250' id='14' name='Bar Chart' param='[csv.41817.609948333331].[none:INSTNM:nk]' type='filter' w='14000' x='85500' y='26500'>
          </zone>
          <zone h='16375' id='15' name='Sheet 3' show-title='true' w='14000' x='85500' y='71750'>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Bar Chart'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='compact' param='[Parameters].[Bach Persist Percent - 200 Parameter]' type='parameter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41817.609948333331].[none:CALSYS:nk]</field>
          <field>[csv.41817.609948333331].[none:CONF:nk]</field>
          <field>[csv.41817.609948333331].[none:INSTNM:nk]</field>
          <field>[csv.41817.609948333331].[none:STABBR:nk]</field>
          <field>[csv.41817.609948333331].[none:YEAR:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41817.609948333331].[none:CITY:nk]</field>
          <field>[csv.41817.609948333331].[none:INSTNM:nk]</field>
          <field>[csv.41817.609948333331].[none:Latitude:qk]</field>
          <field>[csv.41817.609948333331].[none:Longitude:qk]</field>
          <field>[csv.41817.609948333331].[none:STABBR:nk]</field>
          <field>[csv.41817.609948333331].[none:YEAR:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='0' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41817.609948333331].[none:INSTNM:nk]</field>
          <field>[csv.41817.609948333331].[none:YEAR:nk]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='MapBoard'>
      <active id='1' />
      <zones>
        <zone name='Map'>
          <viewpoint>
            <zoom type='entire-view' />
          </viewpoint>
        </zone>
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Bach Persist Percent - 200 Parameter]' type='paramctrl' />
      </zones>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='FilterBoard'>
      <zones>
        <zone custom-title='true' mode='compact' name='' param='[Parameters].[Bach Persist Percent - 200 Parameter]' type='paramctrl' />
      </zones>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='SIMILARITY: plot'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='31'>
            <card type='columns' />
          </strip>
          <strip size='31'>
            <card type='rows' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='261'>
            <card mode='dropdown' param='[csv.41817.609948333331].[none:Calculation_0340630102305428:nk]' type='filter' />
            <card param='[csv.41817.609948333331].[none:YEAR:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[csv.41817.609948333331].[none:Calculation_0340630102305428:nk]</field>
        </color-one-way>
      </highlight>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Bar Chart' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Map' width='192'>
      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
    </thumbnail>
    <thumbnail height='99' name='Sheet 3' width='136'>
      iVBORw0KGgoAAAANSUhEUgAAAIgAAABjCAIAAADPW99EAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAABFUlEQVR4nO3UsQnEMBBFQdlcMeq/GnWjy40jY/ALZvKFDw/2
      2HsPes6vB3BPmChhooSJEiZKmChhooSJEiZKmChhooSJEiZKmChhooSJEiZKmChhon7PztZa
      7+7g4mGYMcac88UdXHhlUcJECRMlTJQwUcJECRMlTJQwUcJECRMlTJQwUcJECRMlTJQwUcJE
      CRMlTJQwUcJECRMlTJQwUcJECRMlTJQwUcJECRMlTJQwUcJECRMlTJQwUcJECRMlTJQwUcJE
      CRMlTJQwUcJECRMlTJQwUcJECRMlTJQwUcJECRMlTJQwUcJECRMlTJQwUcJECRMlTJQwUcJE
      CRMlTJQwUcJECRMlTJQwUcJECRMlTJQwUX/QWgbHirwEmwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='MapBoard' width='192'>
      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
      6BlQD9eF/wd1+Pi+dFZ2/AAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='FilterBoard' width='192'>
      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
    </thumbnail>
    <thumbnail height='144' name='SIMILARITY: plot' width='174'>
      iVBORw0KGgoAAAANSUhEUgAAAK4AAACQCAIAAAAeHsdkAAAAA3NCSVQICAjb4U/gAAAACXBI
      WXMAAA7EAAAOxAGVKw4bAAAC50lEQVR4nO3dTYiVVRzH8WPjploMoYHSIrPEkSCQQNQc1BLM
      pZsHRho0MEGQdqJCs1Hc1CIYBg11kSAOBRFttCu+z+jADBEIyQXF8a2QYsgX5JJ4uW1+s01m
      EVcvn8/uHJ4H/osv5yzPrFarVaCUl9o9AM8LKRBSIKRASIGQAiEFQgqEFAgpEFIgpEBIgZAC
      IQVCCoQUCCkQUiCkQEiBkAIhBUIKhBQIKRBSIKRASIGQAiEFQgqEFAgpEFIgpEBIgZACIQVC
      CoQUCCkQUiCkQEiBkAIhBWJ2uweYmXq93u4ROtYLlkIppaenp90jdCYXBCEFQgqEFAgpEFIg
      pEBIgZACIQVCCoQUCCkQUiCkQEiBkAIhBUIKhBQIKRBSIKRASIGQAiEFQgqEFAgpEFIgpEBI
      gZACIQVCCoQUCCkQUiCkQEiBkAIhBUIKhBQIKXSoqRMD1aavRhtZTgxWO3/8/T//kEJnmjx9
      cvaaVX+M/dJ49rchhY40OT46d0XfhuW3a+empveat376or+q+nd8eepOs5Ty6Mq3u7Zsqqr+
      HYMX/2xKoTP9dvbnN9b2vvbWug3l5OnJbN4df/jh0PCxfb1/HTlUm2peGf76wvzPDg4f2/N+
      /ZujY40X8GkQnqE5Mbi/9vhpbXM1VEopZe+hJUe2lVLKsjWru7u6uletfPOH6zfu/XPt8dLq
      g+6u0v3pgeOlOBU6T2Ps/MTSz49+Hwe3LhipjTVKKWX8/IUHzSc3Ry/fWvzOwnlvL3r110uX
      HjSf3PxuZzVwYkoKnebvkTNXe9eveHl6Peejjb1Xa+cellLefaW+q/+TgZHXt25bP6frvb7d
      H98/vL1veqPMarVabRx8pur1urej/idOBUIKhBQIKRBSIKRASIGQAiEFQgqEFAgpEFIgpEBI
      gZACIQVCCoQUCCkQUiCkQEiBkAIhBUIKhBQIKRBSIKRASIGQAiEFQgqEFAgpEFIgpEBIgZAC
      IQVCCsS/cSeVlvE9yrIAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
